;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Top : 
  module pc : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, pc_out : UInt<32>, pc_out4 : UInt<32>}
    
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pc.scala 12:22]
    reg <= io.addr @[pc.scala 13:8]
    io.pc_out <= reg @[pc.scala 14:14]
    node _T = add(reg, UInt<3>("h04")) @[pc.scala 15:21]
    node _T_1 = tail(_T, 1) @[pc.scala 15:21]
    io.pc_out4 <= _T_1 @[pc.scala 15:15]
    
  module alucontrol : 
    input clock : Clock
    input reset : Reset
    output io : {flip alu : UInt<3>, flip f3 : UInt<3>, flip f7 : UInt<1>, alucontrolout : UInt<5>}
    
    io.alucontrolout <= UInt<1>("h00") @[ALU_CONTROL.scala 13:21]
    node _T = eq(io.alu, UInt<1>("h01")) @[ALU_CONTROL.scala 14:16]
    when _T : @[ALU_CONTROL.scala 14:28]
      node hi = bits(io.alu, 2, 1) @[ALU_CONTROL.scala 15:37]
      node _T_1 = cat(hi, io.f3) @[Cat.scala 30:58]
      io.alucontrolout <= _T_1 @[ALU_CONTROL.scala 15:25]
      skip @[ALU_CONTROL.scala 14:28]
    else : @[ALU_CONTROL.scala 16:34]
      node _T_2 = eq(io.alu, UInt<1>("h00")) @[ALU_CONTROL.scala 16:22]
      when _T_2 : @[ALU_CONTROL.scala 16:34]
        node hi_hi = bits(io.alu, 1, 1) @[ALU_CONTROL.scala 17:37]
        node hi_1 = cat(hi_hi, io.f7) @[Cat.scala 30:58]
        node _T_3 = cat(hi_1, io.f3) @[Cat.scala 30:58]
        io.alucontrolout <= _T_3 @[ALU_CONTROL.scala 17:25]
        skip @[ALU_CONTROL.scala 16:34]
      else : @[ALU_CONTROL.scala 18:34]
        node _T_4 = eq(io.alu, UInt<2>("h02")) @[ALU_CONTROL.scala 18:22]
        when _T_4 : @[ALU_CONTROL.scala 18:34]
          node hi_2 = bits(io.alu, 1, 0) @[ALU_CONTROL.scala 19:37]
          node _T_5 = cat(hi_2, io.f3) @[Cat.scala 30:58]
          io.alucontrolout <= _T_5 @[ALU_CONTROL.scala 19:25]
          skip @[ALU_CONTROL.scala 18:34]
        else : @[ALU_CONTROL.scala 20:34]
          node _T_6 = eq(io.alu, UInt<3>("h05")) @[ALU_CONTROL.scala 20:22]
          when _T_6 : @[ALU_CONTROL.scala 20:34]
            node _T_7 = mux(UInt<1>("h00"), UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 72:12]
            io.alucontrolout <= _T_7 @[ALU_CONTROL.scala 21:25]
            skip @[ALU_CONTROL.scala 20:34]
          else : @[ALU_CONTROL.scala 22:34]
            node _T_8 = eq(io.alu, UInt<2>("h03")) @[ALU_CONTROL.scala 22:22]
            when _T_8 : @[ALU_CONTROL.scala 22:34]
              node _T_9 = mux(UInt<1>("h01"), UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 72:12]
              io.alucontrolout <= _T_9 @[ALU_CONTROL.scala 23:25]
              skip @[ALU_CONTROL.scala 22:34]
            else : @[ALU_CONTROL.scala 24:34]
              node _T_10 = eq(io.alu, UInt<3>("h06")) @[ALU_CONTROL.scala 24:22]
              when _T_10 : @[ALU_CONTROL.scala 24:34]
                node _T_11 = mux(UInt<1>("h00"), UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 72:12]
                io.alucontrolout <= _T_11 @[ALU_CONTROL.scala 25:25]
                skip @[ALU_CONTROL.scala 24:34]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : UInt<32>, flip in_B : UInt<32>, flip alu_Op : UInt<5>, out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[alu.scala 14:11]
    node _T = eq(UInt<1>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = add(io.in_A, io.in_B) @[alu.scala 18:29]
      node _T_2 = tail(_T_1, 1) @[alu.scala 18:29]
      io.out <= _T_2 @[alu.scala 18:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<4>("h08"), io.alu_Op) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = sub(io.in_A, io.in_B) @[alu.scala 20:29]
        node _T_5 = tail(_T_4, 1) @[alu.scala 20:29]
        io.out <= _T_5 @[alu.scala 20:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_6 = eq(UInt<3>("h04"), io.alu_Op) @[Conditional.scala 37:30]
        when _T_6 : @[Conditional.scala 39:67]
          node _T_7 = xor(io.in_A, io.in_B) @[alu.scala 22:30]
          io.out <= _T_7 @[alu.scala 22:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<3>("h06"), io.alu_Op) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            node _T_9 = or(io.in_A, io.in_B) @[alu.scala 24:28]
            io.out <= _T_9 @[alu.scala 24:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_10 = eq(UInt<3>("h07"), io.alu_Op) @[Conditional.scala 37:30]
            when _T_10 : @[Conditional.scala 39:67]
              node _T_11 = and(io.in_A, io.in_B) @[alu.scala 26:29]
              io.out <= _T_11 @[alu.scala 26:19]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_12 = eq(UInt<5>("h01f"), io.alu_Op) @[Conditional.scala 37:30]
              when _T_12 : @[Conditional.scala 39:67]
                io.out <= io.in_A @[alu.scala 28:19]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_13 = eq(UInt<1>("h01"), io.alu_Op) @[Conditional.scala 37:30]
                when _T_13 : @[Conditional.scala 39:67]
                  node _T_14 = bits(io.in_B, 4, 0) @[alu.scala 30:37]
                  node _T_15 = dshl(io.in_A, _T_14) @[alu.scala 30:28]
                  io.out <= _T_15 @[alu.scala 30:19]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_16 = eq(UInt<3>("h05"), io.alu_Op) @[Conditional.scala 37:30]
                  when _T_16 : @[Conditional.scala 39:67]
                    node _T_17 = bits(io.in_B, 4, 0) @[alu.scala 32:37]
                    node _T_18 = dshr(io.in_A, _T_17) @[alu.scala 32:28]
                    io.out <= _T_18 @[alu.scala 32:19]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_19 = eq(UInt<2>("h02"), io.alu_Op) @[Conditional.scala 37:30]
                    when _T_19 : @[Conditional.scala 39:67]
                      node _T_20 = lt(io.in_A, io.in_B) @[alu.scala 34:26]
                      when _T_20 : @[alu.scala 34:36]
                        io.out <= UInt<1>("h01") @[alu.scala 35:23]
                        skip @[alu.scala 34:36]
                      else : @[alu.scala 36:24]
                        io.out <= UInt<1>("h00") @[alu.scala 37:23]
                        skip @[alu.scala 36:24]
                      skip @[Conditional.scala 39:67]
    
  module controller : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<7>, memwrite : UInt<1>, branch : UInt<1>, memread : UInt<1>, regwrite : UInt<1>, memtoreg : UInt<1>, aluop : UInt<3>, opA : UInt<4>, opB : UInt<2>, extendsel : UInt<4>, nextpcsel : UInt<4>}
    
    io.memwrite <= UInt<1>("h00") @[controller.scala 20:18]
    io.branch <= UInt<1>("h00") @[controller.scala 21:14]
    io.memread <= UInt<1>("h00") @[controller.scala 22:15]
    io.regwrite <= UInt<1>("h00") @[controller.scala 23:17]
    io.memtoreg <= UInt<1>("h00") @[controller.scala 24:16]
    io.aluop <= UInt<1>("h00") @[controller.scala 25:13]
    io.opA <= UInt<1>("h00") @[controller.scala 26:12]
    io.opB <= UInt<1>("h00") @[controller.scala 27:12]
    io.extendsel <= UInt<1>("h00") @[controller.scala 28:18]
    io.nextpcsel <= UInt<1>("h00") @[controller.scala 29:18]
    node _T = eq(UInt<5>("h013"), io.in) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.memwrite <= UInt<1>("h00") @[controller.scala 32:27]
      io.branch <= UInt<1>("h00") @[controller.scala 33:23]
      io.memread <= UInt<1>("h00") @[controller.scala 34:24]
      io.regwrite <= UInt<1>("h01") @[controller.scala 35:26]
      io.memtoreg <= UInt<1>("h00") @[controller.scala 36:25]
      io.aluop <= UInt<1>("h01") @[controller.scala 37:22]
      io.opA <= UInt<1>("h00") @[controller.scala 38:21]
      io.opB <= UInt<1>("h01") @[controller.scala 39:21]
      io.extendsel <= UInt<1>("h00") @[controller.scala 40:27]
      io.nextpcsel <= UInt<1>("h00") @[controller.scala 41:27]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<6>("h033"), io.in) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.memwrite <= UInt<1>("h00") @[controller.scala 45:26]
        io.branch <= UInt<1>("h00") @[controller.scala 46:23]
        io.memread <= UInt<1>("h00") @[controller.scala 47:24]
        io.regwrite <= UInt<1>("h01") @[controller.scala 48:26]
        io.memtoreg <= UInt<1>("h00") @[controller.scala 49:25]
        io.aluop <= UInt<1>("h00") @[controller.scala 50:22]
        io.opA <= UInt<1>("h00") @[controller.scala 51:21]
        io.opB <= UInt<1>("h00") @[controller.scala 52:21]
        io.extendsel <= UInt<1>("h00") @[controller.scala 53:27]
        io.nextpcsel <= UInt<1>("h00") @[controller.scala 54:27]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<6>("h023"), io.in) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.memwrite <= UInt<1>("h01") @[controller.scala 58:25]
          io.branch <= UInt<1>("h00") @[controller.scala 59:22]
          io.memread <= UInt<1>("h00") @[controller.scala 60:23]
          io.regwrite <= UInt<1>("h00") @[controller.scala 61:25]
          io.memtoreg <= UInt<1>("h00") @[controller.scala 62:24]
          io.aluop <= UInt<3>("h05") @[controller.scala 63:21]
          io.opA <= UInt<1>("h00") @[controller.scala 64:20]
          io.opB <= UInt<1>("h01") @[controller.scala 65:20]
          io.extendsel <= UInt<2>("h02") @[controller.scala 66:26]
          io.nextpcsel <= UInt<1>("h00") @[controller.scala 67:26]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.in) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.memwrite <= UInt<1>("h00") @[controller.scala 70:26]
            io.branch <= UInt<1>("h00") @[controller.scala 71:22]
            io.memread <= UInt<1>("h01") @[controller.scala 72:23]
            io.regwrite <= UInt<1>("h01") @[controller.scala 73:25]
            io.memtoreg <= UInt<1>("h01") @[controller.scala 74:24]
            io.aluop <= UInt<2>("h03") @[controller.scala 75:21]
            io.opA <= UInt<1>("h00") @[controller.scala 76:20]
            io.opB <= UInt<1>("h01") @[controller.scala 77:20]
            io.extendsel <= UInt<1>("h00") @[controller.scala 78:26]
            io.nextpcsel <= UInt<1>("h00") @[controller.scala 79:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<7>("h063"), io.in) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.memwrite <= UInt<1>("h00") @[controller.scala 82:26]
              io.branch <= UInt<1>("h01") @[controller.scala 83:23]
              io.memread <= UInt<1>("h00") @[controller.scala 84:24]
              io.regwrite <= UInt<1>("h00") @[controller.scala 85:26]
              io.memtoreg <= UInt<1>("h00") @[controller.scala 86:25]
              io.aluop <= UInt<2>("h02") @[controller.scala 87:22]
              io.opA <= UInt<1>("h00") @[controller.scala 88:21]
              io.opB <= UInt<1>("h00") @[controller.scala 89:21]
              io.extendsel <= UInt<1>("h00") @[controller.scala 90:27]
              io.nextpcsel <= UInt<1>("h01") @[controller.scala 91:27]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<7>("h06f"), io.in) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.memwrite <= UInt<1>("h00") @[controller.scala 94:26]
                io.branch <= UInt<1>("h00") @[controller.scala 95:23]
                io.memread <= UInt<1>("h00") @[controller.scala 96:24]
                io.regwrite <= UInt<1>("h01") @[controller.scala 97:26]
                io.memtoreg <= UInt<1>("h00") @[controller.scala 98:25]
                io.aluop <= UInt<2>("h03") @[controller.scala 99:22]
                io.opA <= UInt<2>("h02") @[controller.scala 100:21]
                io.opB <= UInt<1>("h00") @[controller.scala 101:21]
                io.extendsel <= UInt<1>("h00") @[controller.scala 102:27]
                io.nextpcsel <= UInt<2>("h02") @[controller.scala 103:27]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<7>("h067"), io.in) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.memwrite <= UInt<1>("h00") @[controller.scala 106:26]
                  io.branch <= UInt<1>("h00") @[controller.scala 107:23]
                  io.memread <= UInt<1>("h00") @[controller.scala 108:24]
                  io.regwrite <= UInt<1>("h01") @[controller.scala 109:26]
                  io.memtoreg <= UInt<1>("h00") @[controller.scala 110:25]
                  io.aluop <= UInt<2>("h03") @[controller.scala 111:22]
                  io.opA <= UInt<2>("h02") @[controller.scala 112:21]
                  io.opB <= UInt<1>("h00") @[controller.scala 113:21]
                  io.extendsel <= UInt<1>("h00") @[controller.scala 114:27]
                  io.nextpcsel <= UInt<2>("h03") @[controller.scala 115:27]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<6>("h037"), io.in) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.memwrite <= UInt<1>("h00") @[controller.scala 118:26]
                    io.branch <= UInt<1>("h00") @[controller.scala 119:23]
                    io.memread <= UInt<1>("h00") @[controller.scala 120:24]
                    io.regwrite <= UInt<1>("h01") @[controller.scala 121:26]
                    io.memtoreg <= UInt<1>("h00") @[controller.scala 122:25]
                    io.aluop <= UInt<3>("h06") @[controller.scala 123:22]
                    io.opA <= UInt<2>("h03") @[controller.scala 124:21]
                    io.opB <= UInt<1>("h01") @[controller.scala 125:21]
                    io.extendsel <= UInt<2>("h02") @[controller.scala 126:27]
                    io.nextpcsel <= UInt<1>("h00") @[controller.scala 127:27]
                    skip @[Conditional.scala 39:67]
    
  module imem : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<32>, readdata : UInt<32>}
    
    cmem memory : UInt<32>[32] @[imem.scala 13:19]
    node _T = bits(io.address, 4, 0) @[imem.scala 14:25]
    infer mport MPORT = memory[_T], clock @[imem.scala 14:25]
    io.readdata <= MPORT @[imem.scala 14:17]
    
  module immediate : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, iimmd_se : SInt<32>, simmd_se : SInt<32>, sbimmd_se : SInt<32>, uimmd_se : SInt<32>, ujimmd_se : SInt<32>, flip pc : UInt<32>}
    
    node opcodes = bits(io.instr, 6, 0) @[immediate.scala 16:26]
    io.iimmd_se <= asSInt(UInt<1>("h00")) @[immediate.scala 17:16]
    io.simmd_se <= asSInt(UInt<1>("h00")) @[immediate.scala 18:16]
    io.sbimmd_se <= asSInt(UInt<1>("h00")) @[immediate.scala 19:17]
    io.ujimmd_se <= asSInt(UInt<1>("h00")) @[immediate.scala 20:17]
    io.uimmd_se <= asSInt(UInt<1>("h00")) @[immediate.scala 21:16]
    node _T = bits(io.instr, 31, 31) @[immediate.scala 23:39]
    node _T_1 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node hi = mux(_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node lo = bits(io.instr, 31, 20) @[immediate.scala 23:53]
    node _T_2 = cat(hi, lo) @[Cat.scala 30:58]
    node _T_3 = asSInt(_T_2) @[immediate.scala 23:63]
    io.iimmd_se <= _T_3 @[immediate.scala 23:16]
    node _T_4 = bits(io.instr, 31, 31) @[immediate.scala 25:39]
    node _T_5 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node hi_hi = mux(_T_5, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node hi_lo = bits(io.instr, 31, 25) @[immediate.scala 25:53]
    node lo_1 = bits(io.instr, 11, 7) @[immediate.scala 25:69]
    node hi_1 = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node _T_6 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_7 = asSInt(_T_6) @[immediate.scala 25:78]
    io.simmd_se <= _T_7 @[immediate.scala 25:16]
    node _T_8 = bits(io.instr, 31, 31) @[immediate.scala 27:40]
    node _T_9 = bits(_T_8, 0, 0) @[Bitwise.scala 72:15]
    node hi_hi_hi = mux(_T_9, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node hi_hi_lo = bits(io.instr, 31, 31) @[immediate.scala 27:54]
    node hi_lo_1 = bits(io.instr, 7, 7) @[immediate.scala 27:67]
    node lo_hi_hi = bits(io.instr, 30, 25) @[immediate.scala 27:79]
    node lo_hi_lo = bits(io.instr, 11, 8) @[immediate.scala 27:95]
    node lo_hi = cat(lo_hi_hi, lo_hi_lo) @[Cat.scala 30:58]
    node lo_2 = cat(lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node hi_hi_1 = cat(hi_hi_hi, hi_hi_lo) @[Cat.scala 30:58]
    node hi_2 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
    node _T_10 = cat(hi_2, lo_2) @[Cat.scala 30:58]
    node _T_11 = add(_T_10, io.pc) @[immediate.scala 27:111]
    node _T_12 = tail(_T_11, 1) @[immediate.scala 27:111]
    node _T_13 = asSInt(_T_12) @[immediate.scala 27:120]
    io.sbimmd_se <= _T_13 @[immediate.scala 27:17]
    node _T_14 = bits(io.instr, 31, 31) @[immediate.scala 29:40]
    node _T_15 = bits(_T_14, 0, 0) @[Bitwise.scala 72:15]
    node hi_3 = mux(_T_15, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node lo_3 = bits(io.instr, 31, 12) @[immediate.scala 29:54]
    node _T_16 = cat(hi_3, lo_3) @[Cat.scala 30:58]
    node _T_17 = shl(_T_16, 12) @[immediate.scala 29:63]
    node _T_18 = asSInt(_T_17) @[immediate.scala 29:69]
    io.uimmd_se <= _T_18 @[immediate.scala 29:16]
    node _T_19 = bits(io.instr, 31, 31) @[immediate.scala 31:40]
    node _T_20 = bits(_T_19, 0, 0) @[Bitwise.scala 72:15]
    node hi_hi_hi_1 = mux(_T_20, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node hi_hi_lo_1 = bits(io.instr, 31, 31) @[immediate.scala 31:54]
    node hi_lo_2 = bits(io.instr, 19, 12) @[immediate.scala 31:67]
    node lo_hi_hi_1 = bits(io.instr, 20, 20) @[immediate.scala 31:83]
    node lo_hi_lo_1 = bits(io.instr, 31, 21) @[immediate.scala 31:96]
    node lo_hi_1 = cat(lo_hi_hi_1, lo_hi_lo_1) @[Cat.scala 30:58]
    node lo_4 = cat(lo_hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
    node hi_hi_2 = cat(hi_hi_hi_1, hi_hi_lo_1) @[Cat.scala 30:58]
    node hi_4 = cat(hi_hi_2, hi_lo_2) @[Cat.scala 30:58]
    node _T_21 = cat(hi_4, lo_4) @[Cat.scala 30:58]
    node _T_22 = add(_T_21, io.pc) @[immediate.scala 31:112]
    node _T_23 = tail(_T_22, 1) @[immediate.scala 31:112]
    node _T_24 = asSInt(_T_23) @[immediate.scala 31:120]
    io.ujimmd_se <= _T_24 @[immediate.scala 31:17]
    
  module JALR : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, flip pc : UInt<32>, out : UInt<32>}
    
    node _T = add(io.pc, io.addr) @[JALR.scala 12:22]
    node _T_1 = tail(_T, 1) @[JALR.scala 12:22]
    node _T_2 = and(_T_1, UInt<28>("h0fffffff")) @[JALR.scala 12:33]
    io.out <= _T_2 @[JALR.scala 12:12]
    
  module register : 
    input clock : Clock
    input reset : Reset
    output io : {flip regwrite : UInt<1>, flip writereg : UInt<5>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip writedata : SInt<32>, rd1 : SInt<32>, rd2 : SInt<32>}
    
    wire _WIRE : SInt<32>[32] @[register.scala 15:35]
    _WIRE[0] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[1] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[2] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[3] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[4] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[5] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[6] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[7] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[8] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[9] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[10] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[11] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[12] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[13] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[14] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[15] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[16] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[17] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[18] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[19] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[20] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[21] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[22] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[23] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[24] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[25] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[26] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[27] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[28] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[29] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[30] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    _WIRE[31] <= asSInt(UInt<32>("h00")) @[register.scala 15:35]
    reg register : SInt<32>[32], clock with : (reset => (reset, _WIRE)) @[register.scala 15:27]
    register[0] <= asSInt(UInt<1>("h00")) @[register.scala 16:16]
    io.rd1 <= register[io.rs1] @[register.scala 17:12]
    io.rd2 <= register[io.rs2] @[register.scala 18:12]
    node _T = eq(io.regwrite, UInt<1>("h01")) @[register.scala 19:22]
    when _T : @[register.scala 19:30]
      node _T_1 = eq(io.writereg, UInt<1>("h00")) @[register.scala 20:26]
      when _T_1 : @[register.scala 20:41]
        register[io.writereg] <= asSInt(UInt<1>("h00")) @[register.scala 21:35]
        skip @[register.scala 20:41]
      else : @[register.scala 22:20]
        register[io.writereg] <= io.writedata @[register.scala 23:35]
        skip @[register.scala 22:20]
      skip @[register.scala 19:30]
    
  module memory : 
    input clock : Clock
    input reset : Reset
    output io : {flip w_enable : UInt<1>, flip r_enable : UInt<1>, flip addr : UInt<8>, flip data : UInt<32>, output : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[smem.scala 14:18]
    node _T = eq(io.w_enable, UInt<1>("h01")) @[smem.scala 15:23]
    when _T : @[smem.scala 15:31]
      write mport MPORT = mem[io.addr], clock
      MPORT <= io.data
      io.output <= UInt<1>("h00") @[smem.scala 17:18]
      skip @[smem.scala 15:31]
    else : @[smem.scala 18:36]
      node _T_1 = eq(io.r_enable, UInt<1>("h01")) @[smem.scala 18:28]
      when _T_1 : @[smem.scala 18:36]
        read mport MPORT_1 = mem[io.addr], clock @[smem.scala 19:28]
        io.output <= MPORT_1 @[smem.scala 19:18]
        skip @[smem.scala 18:36]
      else : @[smem.scala 20:16]
        io.output <= UInt<1>("h00") @[smem.scala 21:18]
        skip @[smem.scala 20:16]
    
  module IF_ID_Reg : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc_in : UInt<32>, pc_out : UInt<32>, flip pc_in4 : UInt<32>, pc_out4 : UInt<32>, flip instr_in : UInt<32>, instr_out : UInt<32>}
    
    reg pcreg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[if_id_pipe.scala 16:28]
    reg pc4reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[if_id_pipe.scala 17:29]
    reg instrreg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[if_id_pipe.scala 18:30]
    pcreg <= io.pc_in @[if_id_pipe.scala 20:15]
    io.pc_out <= pcreg @[if_id_pipe.scala 21:19]
    pc4reg <= io.pc_in4 @[if_id_pipe.scala 22:16]
    io.pc_out4 <= pc4reg @[if_id_pipe.scala 23:20]
    instrreg <= io.instr_in @[if_id_pipe.scala 24:18]
    io.instr_out <= instrreg @[if_id_pipe.scala 25:22]
    
  module ID_EX_Reg : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc_in : UInt<32>, pc_out : UInt<32>, flip pc_in4 : UInt<32>, pc_out4 : UInt<32>, flip branch_in : UInt<1>, branch_out : UInt<1>, flip regwrite_in : UInt<1>, regwrite_out : UInt<1>, flip f3_in : UInt<3>, f3_out : UInt<3>, flip f7_in : UInt<1>, f7_out : UInt<1>, flip opA_in : UInt<4>, opA_out : UInt<4>, flip opB_in : UInt<2>, opB_out : UInt<2>, flip nextpcsel_in : UInt<4>, nextpcsel_out : UInt<4>, flip memtoreg_in : UInt<1>, memtoreg_out : UInt<1>, flip aluop_in : UInt<3>, aluop_out : UInt<3>, flip memwrite_in : UInt<1>, memwrite_out : UInt<1>, flip memread_in : UInt<1>, memread_out : UInt<1>, flip immd_in : SInt<32>, immd_out : SInt<32>, flip rs1_in : UInt<5>, rs1_out : UInt<5>, flip rs2_in : UInt<5>, rs2_out : UInt<5>, flip rd1_in : SInt<32>, rd1_out : SInt<32>, flip rd2_in : SInt<32>, rd2_out : SInt<32>, flip writereg_in : UInt<5>, writereg_out : UInt<5>}
    
    reg pcreg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[id_ex_pipe.scala 78:24]
    reg pc4reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[id_ex_pipe.scala 79:25]
    reg f3reg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[id_ex_pipe.scala 82:24]
    reg f7reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[id_ex_pipe.scala 83:24]
    reg branchreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[id_ex_pipe.scala 86:28]
    reg regwritereg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[id_ex_pipe.scala 87:30]
    reg opAreg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[id_ex_pipe.scala 88:25]
    reg opBreg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[id_ex_pipe.scala 89:25]
    reg nextpcselreg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[id_ex_pipe.scala 90:31]
    reg memtoregreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[id_ex_pipe.scala 91:30]
    reg aluopreg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[id_ex_pipe.scala 92:27]
    reg memwritereg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[id_ex_pipe.scala 93:30]
    reg memreadreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[id_ex_pipe.scala 94:29]
    reg immdreg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[id_ex_pipe.scala 95:26]
    reg rs1reg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[id_ex_pipe.scala 96:25]
    reg rs2reg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[id_ex_pipe.scala 97:25]
    reg writeregreg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[id_ex_pipe.scala 98:30]
    reg rd1reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[id_ex_pipe.scala 99:25]
    reg rd2reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[id_ex_pipe.scala 100:25]
    pcreg <= io.pc_in @[id_ex_pipe.scala 103:10]
    io.pc_out <= pcreg @[id_ex_pipe.scala 104:14]
    pc4reg <= io.pc_in4 @[id_ex_pipe.scala 106:12]
    io.pc_out4 <= pc4reg @[id_ex_pipe.scala 107:16]
    f3reg <= io.f3_in @[id_ex_pipe.scala 116:11]
    io.f3_out <= f3reg @[id_ex_pipe.scala 117:15]
    f7reg <= io.f7_in @[id_ex_pipe.scala 119:11]
    io.f7_out <= f7reg @[id_ex_pipe.scala 120:15]
    branchreg <= io.branch_in @[id_ex_pipe.scala 128:15]
    io.branch_out <= branchreg @[id_ex_pipe.scala 129:19]
    regwritereg <= io.regwrite_in @[id_ex_pipe.scala 131:17]
    io.regwrite_out <= regwritereg @[id_ex_pipe.scala 132:21]
    opAreg <= io.opA_in @[id_ex_pipe.scala 134:12]
    io.opA_out <= opAreg @[id_ex_pipe.scala 135:16]
    opBreg <= io.opB_in @[id_ex_pipe.scala 137:12]
    io.opB_out <= opBreg @[id_ex_pipe.scala 138:16]
    nextpcselreg <= io.nextpcsel_in @[id_ex_pipe.scala 140:18]
    io.nextpcsel_out <= nextpcselreg @[id_ex_pipe.scala 141:22]
    memtoregreg <= io.memtoreg_in @[id_ex_pipe.scala 143:17]
    io.memtoreg_out <= memtoregreg @[id_ex_pipe.scala 144:21]
    aluopreg <= io.aluop_in @[id_ex_pipe.scala 146:14]
    io.aluop_out <= aluopreg @[id_ex_pipe.scala 147:18]
    memwritereg <= io.memwrite_in @[id_ex_pipe.scala 149:17]
    io.memwrite_out <= memwritereg @[id_ex_pipe.scala 150:21]
    memreadreg <= io.memread_in @[id_ex_pipe.scala 152:16]
    io.memread_out <= memreadreg @[id_ex_pipe.scala 153:20]
    immdreg <= io.immd_in @[id_ex_pipe.scala 155:13]
    io.immd_out <= immdreg @[id_ex_pipe.scala 156:17]
    rs1reg <= io.rs1_in @[id_ex_pipe.scala 158:12]
    io.rs1_out <= rs1reg @[id_ex_pipe.scala 159:16]
    rs2reg <= io.rs2_in @[id_ex_pipe.scala 161:12]
    io.rs2_out <= rs2reg @[id_ex_pipe.scala 162:16]
    writeregreg <= io.writereg_in @[id_ex_pipe.scala 164:17]
    io.writereg_out <= writeregreg @[id_ex_pipe.scala 165:21]
    rd1reg <= io.rd1_in @[id_ex_pipe.scala 167:12]
    io.rd1_out <= rd1reg @[id_ex_pipe.scala 168:16]
    rd2reg <= io.rd2_in @[id_ex_pipe.scala 170:12]
    io.rd2_out <= rd2reg @[id_ex_pipe.scala 171:16]
    
  module EX_MEM_Reg : 
    input clock : Clock
    input reset : Reset
    output io : {flip stdata_in : SInt<32>, stdata_out : SInt<32>, flip alu_in : UInt<32>, alu_out : UInt<32>, flip rd_in : UInt<5>, rd_out : UInt<5>, flip memwrite_in : UInt<1>, flip memread_in : UInt<1>, flip regwrite_in : UInt<1>, flip memtoreg_in : UInt<1>, memwrite_out : UInt<1>, memread_out : UInt<1>, regwrite_out : UInt<1>, memtoreg_out : UInt<1>}
    
    reg stdatareg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ex_mem_pipe.scala 30:32]
    reg memwritereg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ex_mem_pipe.scala 31:34]
    reg memreadreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ex_mem_pipe.scala 32:33]
    reg regwritereg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ex_mem_pipe.scala 33:34]
    reg memtoregreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ex_mem_pipe.scala 34:34]
    reg alureg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ex_mem_pipe.scala 35:29]
    reg rdreg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ex_mem_pipe.scala 36:28]
    stdatareg <= io.stdata_in @[ex_mem_pipe.scala 38:19]
    io.stdata_out <= stdatareg @[ex_mem_pipe.scala 39:23]
    alureg <= io.alu_in @[ex_mem_pipe.scala 41:16]
    io.alu_out <= alureg @[ex_mem_pipe.scala 42:20]
    rdreg <= io.rd_in @[ex_mem_pipe.scala 44:15]
    io.rd_out <= rdreg @[ex_mem_pipe.scala 45:19]
    memwritereg <= io.memwrite_in @[ex_mem_pipe.scala 47:21]
    io.memwrite_out <= memwritereg @[ex_mem_pipe.scala 48:25]
    memreadreg <= io.memread_in @[ex_mem_pipe.scala 50:20]
    io.memread_out <= memreadreg @[ex_mem_pipe.scala 51:24]
    regwritereg <= io.regwrite_in @[ex_mem_pipe.scala 53:21]
    io.regwrite_out <= regwritereg @[ex_mem_pipe.scala 54:25]
    memtoregreg <= io.memtoreg_in @[ex_mem_pipe.scala 56:21]
    io.memtoreg_out <= memtoregreg @[ex_mem_pipe.scala 57:25]
    
  module MEM_WB_Reg : 
    input clock : Clock
    input reset : Reset
    output io : {flip alu_in : UInt<32>, alu_out : UInt<32>, flip rd_in : UInt<5>, rd_out : UInt<5>, flip dataout_in : UInt<32>, dataout_out : UInt<32>, flip memread_in : UInt<1>, memread_out : UInt<1>, flip regwrite_in : UInt<1>, regwrite_out : UInt<1>, flip memwrite_in : UInt<1>, memwrite_out : UInt<1>, flip memtoreg_in : UInt<1>, memtoreg_out : UInt<1>}
    
    reg dataoutreg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[mem_wb_pipe.scala 30:33]
    reg alureg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[mem_wb_pipe.scala 31:25]
    reg rdreg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[mem_wb_pipe.scala 32:24]
    reg regwritereg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[mem_wb_pipe.scala 33:30]
    reg memtoregreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[mem_wb_pipe.scala 34:30]
    reg memreadreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[mem_wb_pipe.scala 35:29]
    reg memwritereg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[mem_wb_pipe.scala 36:30]
    dataoutreg <= io.dataout_in @[mem_wb_pipe.scala 39:20]
    io.dataout_out <= dataoutreg @[mem_wb_pipe.scala 40:24]
    alureg <= io.alu_in @[mem_wb_pipe.scala 42:16]
    io.alu_out <= alureg @[mem_wb_pipe.scala 43:20]
    rdreg <= io.rd_in @[mem_wb_pipe.scala 45:15]
    io.rd_out <= rdreg @[mem_wb_pipe.scala 46:19]
    regwritereg <= io.regwrite_in @[mem_wb_pipe.scala 48:21]
    io.regwrite_out <= regwritereg @[mem_wb_pipe.scala 49:25]
    memtoregreg <= io.memtoreg_in @[mem_wb_pipe.scala 51:21]
    io.memtoreg_out <= memtoregreg @[mem_wb_pipe.scala 52:25]
    memreadreg <= io.memread_in @[mem_wb_pipe.scala 54:16]
    io.memread_out <= memreadreg @[mem_wb_pipe.scala 55:20]
    memwritereg <= io.memwrite_in @[mem_wb_pipe.scala 57:17]
    io.memwrite_out <= memwritereg @[mem_wb_pipe.scala 58:21]
    
  module ForwardUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip EX_MEM_rd : UInt<5>, flip ID_EX_rs1 : UInt<5>, flip ID_EX_rs2 : UInt<5>, flip EX_MEM_regwrite : UInt<1>, flip MEM_WB_rd : UInt<5>, flip MEM_WB_regwrite : UInt<1>, forward_A : UInt<2>, forward_B : UInt<2>}
    
    io.forward_A <= UInt<1>("h00") @[Forward.scala 16:18]
    io.forward_B <= UInt<1>("h00") @[Forward.scala 17:18]
    node _T = eq(io.EX_MEM_regwrite, UInt<1>("h01")) @[Forward.scala 21:29]
    node _T_1 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[Forward.scala 21:53]
    node _T_2 = and(_T, _T_1) @[Forward.scala 21:37]
    node _T_3 = eq(io.EX_MEM_rd, io.ID_EX_rs1) @[Forward.scala 21:84]
    node _T_4 = and(_T_2, _T_3) @[Forward.scala 21:68]
    node _T_5 = eq(io.EX_MEM_rd, io.ID_EX_rs2) @[Forward.scala 21:119]
    node _T_6 = and(_T_4, _T_5) @[Forward.scala 21:102]
    when _T_6 : @[Forward.scala 21:138]
      io.forward_A <= UInt<1>("h01") @[Forward.scala 22:22]
      io.forward_B <= UInt<1>("h01") @[Forward.scala 23:30]
      skip @[Forward.scala 21:138]
    else : @[Forward.scala 24:111]
      node _T_7 = eq(io.EX_MEM_regwrite, UInt<1>("h01")) @[Forward.scala 24:36]
      node _T_8 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[Forward.scala 24:60]
      node _T_9 = and(_T_7, _T_8) @[Forward.scala 24:44]
      node _T_10 = eq(io.EX_MEM_rd, io.ID_EX_rs2) @[Forward.scala 24:92]
      node _T_11 = and(_T_9, _T_10) @[Forward.scala 24:75]
      when _T_11 : @[Forward.scala 24:111]
        io.forward_B <= UInt<1>("h01") @[Forward.scala 25:30]
        skip @[Forward.scala 24:111]
      else : @[Forward.scala 26:111]
        node _T_12 = eq(io.EX_MEM_regwrite, UInt<1>("h01")) @[Forward.scala 26:36]
        node _T_13 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[Forward.scala 26:60]
        node _T_14 = and(_T_12, _T_13) @[Forward.scala 26:44]
        node _T_15 = eq(io.EX_MEM_rd, io.ID_EX_rs1) @[Forward.scala 26:92]
        node _T_16 = and(_T_14, _T_15) @[Forward.scala 26:75]
        when _T_16 : @[Forward.scala 26:111]
          io.forward_A <= UInt<1>("h01") @[Forward.scala 27:30]
          skip @[Forward.scala 26:111]
    node _T_17 = eq(io.MEM_WB_regwrite, UInt<1>("h01")) @[Forward.scala 31:32]
    node _T_18 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[Forward.scala 31:56]
    node _T_19 = and(_T_17, _T_18) @[Forward.scala 31:40]
    node _T_20 = eq(io.EX_MEM_regwrite, UInt<1>("h01")) @[Forward.scala 31:96]
    node _T_21 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[Forward.scala 31:125]
    node _T_22 = and(_T_20, _T_21) @[Forward.scala 31:108]
    node _T_23 = eq(io.EX_MEM_rd, io.ID_EX_rs1) @[Forward.scala 32:22]
    node _T_24 = and(_T_22, _T_23) @[Forward.scala 31:141]
    node _T_25 = eq(io.EX_MEM_rd, io.ID_EX_rs2) @[Forward.scala 32:57]
    node _T_26 = and(_T_24, _T_25) @[Forward.scala 32:40]
    node _T_27 = not(_T_26) @[Forward.scala 31:74]
    node _T_28 = and(_T_19, _T_27) @[Forward.scala 31:71]
    node _T_29 = eq(io.MEM_WB_rd, io.ID_EX_rs1) @[Forward.scala 32:92]
    node _T_30 = and(_T_28, _T_29) @[Forward.scala 32:76]
    node _T_31 = eq(io.MEM_WB_rd, io.ID_EX_rs2) @[Forward.scala 33:22]
    node _T_32 = and(_T_30, _T_31) @[Forward.scala 32:110]
    when _T_32 : @[Forward.scala 33:41]
      io.forward_A <= UInt<2>("h02") @[Forward.scala 34:30]
      io.forward_B <= UInt<2>("h02") @[Forward.scala 35:30]
      skip @[Forward.scala 33:41]
    else : @[Forward.scala 37:74]
      node _T_33 = eq(io.MEM_WB_regwrite, UInt<1>("h01")) @[Forward.scala 36:40]
      node _T_34 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[Forward.scala 36:64]
      node _T_35 = and(_T_33, _T_34) @[Forward.scala 36:48]
      node _T_36 = eq(io.EX_MEM_regwrite, UInt<1>("h01")) @[Forward.scala 36:104]
      node _T_37 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[Forward.scala 36:130]
      node _T_38 = and(_T_36, _T_37) @[Forward.scala 36:113]
      node _T_39 = eq(io.EX_MEM_rd, io.ID_EX_rs2) @[Forward.scala 37:19]
      node _T_40 = and(_T_38, _T_39) @[Forward.scala 36:146]
      node _T_41 = not(_T_40) @[Forward.scala 36:82]
      node _T_42 = and(_T_35, _T_41) @[Forward.scala 36:79]
      node _T_43 = eq(io.MEM_WB_rd, io.ID_EX_rs2) @[Forward.scala 37:55]
      node _T_44 = and(_T_42, _T_43) @[Forward.scala 37:38]
      when _T_44 : @[Forward.scala 37:74]
        io.forward_B <= UInt<2>("h02") @[Forward.scala 38:30]
        skip @[Forward.scala 37:74]
      else : @[Forward.scala 40:76]
        node _T_45 = eq(io.MEM_WB_regwrite, UInt<1>("h01")) @[Forward.scala 39:40]
        node _T_46 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[Forward.scala 39:64]
        node _T_47 = and(_T_45, _T_46) @[Forward.scala 39:48]
        node _T_48 = eq(io.EX_MEM_regwrite, UInt<1>("h01")) @[Forward.scala 39:104]
        node _T_49 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[Forward.scala 39:129]
        node _T_50 = and(_T_48, _T_49) @[Forward.scala 39:112]
        node _T_51 = eq(io.EX_MEM_rd, io.ID_EX_rs2) @[Forward.scala 40:19]
        node _T_52 = and(_T_50, _T_51) @[Forward.scala 39:145]
        node _T_53 = not(_T_52) @[Forward.scala 39:82]
        node _T_54 = and(_T_47, _T_53) @[Forward.scala 39:79]
        node _T_55 = eq(io.MEM_WB_rd, io.ID_EX_rs1) @[Forward.scala 40:57]
        node _T_56 = and(_T_54, _T_55) @[Forward.scala 40:39]
        when _T_56 : @[Forward.scala 40:76]
          io.forward_A <= UInt<2>("h02") @[Forward.scala 41:30]
          skip @[Forward.scala 40:76]
    
  module HazardDetection : 
    input clock : Clock
    input reset : Reset
    output io : {flip IF_ID_instr : UInt<32>, flip ID_EX_memread : UInt<1>, flip ID_EX_rd : UInt<5>, flip pc_in : UInt<32>, flip current_pc_in : UInt<32>, instr_forward : UInt<1>, pc_forward : UInt<1>, ctrl_forward : UInt<1>, instr_out : UInt<32>, pc_out : UInt<32>, current_pc_out : UInt<32>}
    
    node rs1_sel = bits(io.IF_ID_instr, 19, 15) @[hazard.scala 18:31]
    node rs2_sel = bits(io.IF_ID_instr, 24, 20) @[hazard.scala 19:31]
    node _T = eq(io.ID_EX_memread, UInt<1>("h01")) @[hazard.scala 20:25]
    node _T_1 = eq(io.ID_EX_rd, rs1_sel) @[hazard.scala 20:50]
    node _T_2 = eq(io.ID_EX_rd, rs2_sel) @[hazard.scala 20:79]
    node _T_3 = or(_T_1, _T_2) @[hazard.scala 20:63]
    node _T_4 = and(_T, _T_3) @[hazard.scala 20:33]
    when _T_4 : @[hazard.scala 20:94]
      io.instr_forward <= UInt<1>("h01") @[hazard.scala 21:24]
      io.pc_forward <= UInt<1>("h01") @[hazard.scala 22:21]
      io.ctrl_forward <= UInt<1>("h01") @[hazard.scala 23:23]
      io.instr_out <= io.IF_ID_instr @[hazard.scala 24:20]
      io.pc_out <= io.pc_in @[hazard.scala 25:17]
      io.current_pc_out <= io.current_pc_in @[hazard.scala 26:25]
      skip @[hazard.scala 20:94]
    else : @[hazard.scala 28:16]
      io.instr_forward <= UInt<1>("h00") @[hazard.scala 29:22]
      io.pc_forward <= UInt<1>("h00") @[hazard.scala 30:19]
      io.ctrl_forward <= UInt<1>("h00") @[hazard.scala 31:21]
      io.instr_out <= io.IF_ID_instr @[hazard.scala 32:18]
      io.pc_out <= io.pc_in @[hazard.scala 33:15]
      io.current_pc_out <= io.current_pc_in @[hazard.scala 34:23]
      skip @[hazard.scala 28:16]
    
  module BranchLogic : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_rs1 : SInt<32>, flip in_rs2 : SInt<32>, flip in_func3 : UInt<3>, output : UInt<1>}
    
    node _T = eq(io.in_func3, UInt<1>("h00")) @[branchlogic.scala 14:20]
    when _T : @[branchlogic.scala 14:34]
      node _T_1 = eq(io.in_rs1, io.in_rs2) @[branchlogic.scala 16:20]
      when _T_1 : @[branchlogic.scala 16:35]
        io.output <= UInt<1>("h01") @[branchlogic.scala 17:17]
        skip @[branchlogic.scala 16:35]
      else : @[branchlogic.scala 18:18]
        io.output <= UInt<1>("h00") @[branchlogic.scala 19:17]
        skip @[branchlogic.scala 18:18]
      skip @[branchlogic.scala 14:34]
    else : @[branchlogic.scala 21:41]
      node _T_2 = eq(io.in_func3, UInt<1>("h01")) @[branchlogic.scala 21:27]
      when _T_2 : @[branchlogic.scala 21:41]
        node _T_3 = neq(io.in_rs1, io.in_rs2) @[branchlogic.scala 23:20]
        when _T_3 : @[branchlogic.scala 23:35]
          io.output <= UInt<1>("h01") @[branchlogic.scala 24:17]
          skip @[branchlogic.scala 23:35]
        else : @[branchlogic.scala 25:18]
          io.output <= UInt<1>("h00") @[branchlogic.scala 26:17]
          skip @[branchlogic.scala 25:18]
        skip @[branchlogic.scala 21:41]
      else : @[branchlogic.scala 28:41]
        node _T_4 = eq(io.in_func3, UInt<3>("h04")) @[branchlogic.scala 28:27]
        when _T_4 : @[branchlogic.scala 28:41]
          node _T_5 = lt(io.in_rs1, io.in_rs2) @[branchlogic.scala 30:20]
          when _T_5 : @[branchlogic.scala 30:33]
            io.output <= UInt<1>("h01") @[branchlogic.scala 31:17]
            skip @[branchlogic.scala 30:33]
          else : @[branchlogic.scala 32:18]
            io.output <= UInt<1>("h00") @[branchlogic.scala 33:17]
            skip @[branchlogic.scala 32:18]
          skip @[branchlogic.scala 28:41]
        else : @[branchlogic.scala 35:41]
          node _T_6 = eq(io.in_func3, UInt<3>("h05")) @[branchlogic.scala 35:27]
          when _T_6 : @[branchlogic.scala 35:41]
            node _T_7 = geq(io.in_rs1, io.in_rs2) @[branchlogic.scala 37:20]
            when _T_7 : @[branchlogic.scala 37:34]
              io.output <= UInt<1>("h01") @[branchlogic.scala 38:17]
              skip @[branchlogic.scala 37:34]
            else : @[branchlogic.scala 39:18]
              io.output <= UInt<1>("h00") @[branchlogic.scala 40:17]
              skip @[branchlogic.scala 39:18]
            skip @[branchlogic.scala 35:41]
          else : @[branchlogic.scala 42:41]
            node _T_8 = eq(io.in_func3, UInt<3>("h06")) @[branchlogic.scala 42:27]
            when _T_8 : @[branchlogic.scala 42:41]
              node _T_9 = asUInt(io.in_rs1) @[branchlogic.scala 44:20]
              node _T_10 = asUInt(io.in_rs2) @[branchlogic.scala 44:39]
              node _T_11 = lt(_T_9, _T_10) @[branchlogic.scala 44:27]
              when _T_11 : @[branchlogic.scala 44:47]
                io.output <= UInt<1>("h01") @[branchlogic.scala 45:17]
                skip @[branchlogic.scala 44:47]
              else : @[branchlogic.scala 46:18]
                io.output <= UInt<1>("h00") @[branchlogic.scala 47:17]
                skip @[branchlogic.scala 46:18]
              skip @[branchlogic.scala 42:41]
            else : @[branchlogic.scala 49:41]
              node _T_12 = eq(io.in_func3, UInt<3>("h07")) @[branchlogic.scala 49:27]
              when _T_12 : @[branchlogic.scala 49:41]
                node _T_13 = asUInt(io.in_rs1) @[branchlogic.scala 51:20]
                node _T_14 = asUInt(io.in_rs2) @[branchlogic.scala 51:40]
                node _T_15 = geq(_T_13, _T_14) @[branchlogic.scala 51:27]
                when _T_15 : @[branchlogic.scala 51:48]
                  io.output <= UInt<1>("h01") @[branchlogic.scala 52:17]
                  skip @[branchlogic.scala 51:48]
                else : @[branchlogic.scala 53:18]
                  io.output <= UInt<1>("h00") @[branchlogic.scala 54:17]
                  skip @[branchlogic.scala 53:18]
                skip @[branchlogic.scala 49:41]
              else : @[branchlogic.scala 56:16]
                io.output <= UInt<1>("h00") @[branchlogic.scala 57:15]
                skip @[branchlogic.scala 56:16]
    
  module BranchForward : 
    input clock : Clock
    input reset : Reset
    output io : {flip ID_EX_rd : UInt<5>, flip ID_EX_memread : UInt<1>, flip EX_MEM_rd : UInt<5>, flip EX_MEM_memread : UInt<1>, flip MEM_WB_rd : UInt<5>, flip MEM_WB_memread : UInt<1>, flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip ctrl_branch : UInt<1>, forward_rs1 : UInt<4>, forward_rs2 : UInt<4>}
    
    io.forward_rs1 <= UInt<1>("h00") @[branchforward.scala 19:20]
    io.forward_rs2 <= UInt<1>("h00") @[branchforward.scala 20:20]
    node _T = eq(io.ctrl_branch, UInt<1>("h01")) @[branchforward.scala 21:21]
    when _T : @[branchforward.scala 21:30]
      node _T_1 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 23:20]
      node _T_2 = neq(io.ID_EX_memread, UInt<1>("h01")) @[branchforward.scala 23:55]
      node _T_3 = and(_T_1, _T_2) @[branchforward.scala 23:35]
      node _T_4 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 23:79]
      node _T_5 = and(_T_3, _T_4) @[branchforward.scala 23:63]
      node _T_6 = eq(io.ID_EX_rd, io.rs2_sel) @[branchforward.scala 23:111]
      node _T_7 = and(_T_5, _T_6) @[branchforward.scala 23:95]
      when _T_7 : @[branchforward.scala 23:128]
        io.forward_rs1 <= UInt<1>("h01") @[branchforward.scala 24:20]
        io.forward_rs2 <= UInt<1>("h01") @[branchforward.scala 25:20]
        skip @[branchforward.scala 23:128]
      else : @[branchforward.scala 26:103]
        node _T_8 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 26:27]
        node _T_9 = neq(io.ID_EX_memread, UInt<1>("h01")) @[branchforward.scala 26:62]
        node _T_10 = and(_T_8, _T_9) @[branchforward.scala 26:42]
        node _T_11 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 26:86]
        node _T_12 = and(_T_10, _T_11) @[branchforward.scala 26:70]
        when _T_12 : @[branchforward.scala 26:103]
          io.forward_rs1 <= UInt<1>("h01") @[branchforward.scala 27:20]
          skip @[branchforward.scala 26:103]
        else : @[branchforward.scala 28:103]
          node _T_13 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 28:27]
          node _T_14 = neq(io.ID_EX_memread, UInt<1>("h01")) @[branchforward.scala 28:62]
          node _T_15 = and(_T_13, _T_14) @[branchforward.scala 28:42]
          node _T_16 = eq(io.ID_EX_rd, io.rs2_sel) @[branchforward.scala 28:86]
          node _T_17 = and(_T_15, _T_16) @[branchforward.scala 28:70]
          when _T_17 : @[branchforward.scala 28:103]
            io.forward_rs2 <= UInt<1>("h01") @[branchforward.scala 29:20]
            skip @[branchforward.scala 28:103]
      node _T_18 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 33:21]
      node _T_19 = neq(io.EX_MEM_memread, UInt<1>("h01")) @[branchforward.scala 33:57]
      node _T_20 = and(_T_18, _T_19) @[branchforward.scala 33:36]
      node _T_21 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 34:20]
      node _T_22 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 34:52]
      node _T_23 = and(_T_21, _T_22) @[branchforward.scala 34:36]
      node _T_24 = eq(io.ID_EX_rd, io.rs2_sel) @[branchforward.scala 34:84]
      node _T_25 = and(_T_23, _T_24) @[branchforward.scala 34:68]
      node _T_26 = not(_T_25) @[branchforward.scala 34:5]
      node _T_27 = and(_T_20, _T_26) @[branchforward.scala 33:65]
      node _T_28 = eq(io.EX_MEM_rd, io.rs1_sel) @[branchforward.scala 35:19]
      node _T_29 = and(_T_27, _T_28) @[branchforward.scala 34:101]
      node _T_30 = eq(io.EX_MEM_rd, io.rs2_sel) @[branchforward.scala 35:52]
      node _T_31 = and(_T_29, _T_30) @[branchforward.scala 35:35]
      when _T_31 : @[branchforward.scala 35:69]
        io.forward_rs1 <= UInt<2>("h02") @[branchforward.scala 37:20]
        io.forward_rs2 <= UInt<2>("h02") @[branchforward.scala 38:20]
        skip @[branchforward.scala 35:69]
      else : @[branchforward.scala 42:36]
        node _T_32 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 40:28]
        node _T_33 = neq(io.EX_MEM_memread, UInt<1>("h01")) @[branchforward.scala 40:64]
        node _T_34 = and(_T_32, _T_33) @[branchforward.scala 40:43]
        node _T_35 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 41:20]
        node _T_36 = eq(io.ID_EX_rd, io.rs2_sel) @[branchforward.scala 41:52]
        node _T_37 = and(_T_35, _T_36) @[branchforward.scala 41:36]
        node _T_38 = not(_T_37) @[branchforward.scala 41:5]
        node _T_39 = and(_T_34, _T_38) @[branchforward.scala 40:72]
        node _T_40 = eq(io.EX_MEM_rd, io.rs2_sel) @[branchforward.scala 42:19]
        node _T_41 = and(_T_39, _T_40) @[branchforward.scala 41:69]
        when _T_41 : @[branchforward.scala 42:36]
          io.forward_rs2 <= UInt<2>("h02") @[branchforward.scala 44:20]
          skip @[branchforward.scala 42:36]
        else : @[branchforward.scala 48:36]
          node _T_42 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 46:28]
          node _T_43 = neq(io.EX_MEM_memread, UInt<1>("h01")) @[branchforward.scala 46:64]
          node _T_44 = and(_T_42, _T_43) @[branchforward.scala 46:43]
          node _T_45 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 47:20]
          node _T_46 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 47:52]
          node _T_47 = and(_T_45, _T_46) @[branchforward.scala 47:36]
          node _T_48 = not(_T_47) @[branchforward.scala 47:5]
          node _T_49 = and(_T_44, _T_48) @[branchforward.scala 46:72]
          node _T_50 = eq(io.EX_MEM_rd, io.rs1_sel) @[branchforward.scala 48:19]
          node _T_51 = and(_T_49, _T_50) @[branchforward.scala 47:69]
          when _T_51 : @[branchforward.scala 48:36]
            io.forward_rs1 <= UInt<2>("h02") @[branchforward.scala 50:20]
            skip @[branchforward.scala 48:36]
          else : @[branchforward.scala 54:69]
            node _T_52 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 52:28]
            node _T_53 = eq(io.EX_MEM_memread, UInt<1>("h01")) @[branchforward.scala 52:64]
            node _T_54 = and(_T_52, _T_53) @[branchforward.scala 52:43]
            node _T_55 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 53:20]
            node _T_56 = eq(io.ID_EX_memread, io.rs1_sel) @[branchforward.scala 53:57]
            node _T_57 = and(_T_55, _T_56) @[branchforward.scala 53:36]
            node _T_58 = eq(io.ID_EX_rd, io.rs2_sel) @[branchforward.scala 53:89]
            node _T_59 = and(_T_57, _T_58) @[branchforward.scala 53:73]
            node _T_60 = not(_T_59) @[branchforward.scala 53:5]
            node _T_61 = and(_T_54, _T_60) @[branchforward.scala 52:72]
            node _T_62 = eq(io.EX_MEM_rd, io.rs1_sel) @[branchforward.scala 54:19]
            node _T_63 = and(_T_61, _T_62) @[branchforward.scala 53:106]
            node _T_64 = eq(io.EX_MEM_rd, io.rs2_sel) @[branchforward.scala 54:52]
            node _T_65 = and(_T_63, _T_64) @[branchforward.scala 54:35]
            when _T_65 : @[branchforward.scala 54:69]
              io.forward_rs1 <= UInt<3>("h04") @[branchforward.scala 56:20]
              io.forward_rs2 <= UInt<3>("h04") @[branchforward.scala 57:20]
              skip @[branchforward.scala 54:69]
            else : @[branchforward.scala 61:36]
              node _T_66 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 59:28]
              node _T_67 = eq(io.EX_MEM_memread, UInt<1>("h01")) @[branchforward.scala 59:64]
              node _T_68 = and(_T_66, _T_67) @[branchforward.scala 59:43]
              node _T_69 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 60:20]
              node _T_70 = eq(io.ID_EX_rd, io.rs2_sel) @[branchforward.scala 60:52]
              node _T_71 = and(_T_69, _T_70) @[branchforward.scala 60:36]
              node _T_72 = not(_T_71) @[branchforward.scala 60:5]
              node _T_73 = and(_T_68, _T_72) @[branchforward.scala 59:72]
              node _T_74 = eq(io.EX_MEM_rd, io.rs2_sel) @[branchforward.scala 61:19]
              node _T_75 = and(_T_73, _T_74) @[branchforward.scala 60:69]
              when _T_75 : @[branchforward.scala 61:36]
                io.forward_rs2 <= UInt<3>("h04") @[branchforward.scala 63:20]
                skip @[branchforward.scala 61:36]
              else : @[branchforward.scala 67:36]
                node _T_76 = eq(io.ctrl_branch, UInt<1>("h01")) @[branchforward.scala 65:30]
                node _T_77 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 65:54]
                node _T_78 = and(_T_76, _T_77) @[branchforward.scala 65:38]
                node _T_79 = eq(io.EX_MEM_memread, UInt<1>("h01")) @[branchforward.scala 65:90]
                node _T_80 = and(_T_78, _T_79) @[branchforward.scala 65:69]
                node _T_81 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 66:20]
                node _T_82 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 66:52]
                node _T_83 = and(_T_81, _T_82) @[branchforward.scala 66:36]
                node _T_84 = not(_T_83) @[branchforward.scala 66:5]
                node _T_85 = and(_T_80, _T_84) @[branchforward.scala 65:98]
                node _T_86 = eq(io.EX_MEM_rd, io.rs1_sel) @[branchforward.scala 67:19]
                node _T_87 = and(_T_85, _T_86) @[branchforward.scala 66:69]
                when _T_87 : @[branchforward.scala 67:36]
                  io.forward_rs1 <= UInt<3>("h04") @[branchforward.scala 69:20]
                  skip @[branchforward.scala 67:36]
      node _T_88 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[branchforward.scala 74:21]
      node _T_89 = neq(io.MEM_WB_memread, UInt<1>("h01")) @[branchforward.scala 74:57]
      node _T_90 = and(_T_88, _T_89) @[branchforward.scala 74:36]
      node _T_91 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 76:20]
      node _T_92 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 76:52]
      node _T_93 = and(_T_91, _T_92) @[branchforward.scala 76:36]
      node _T_94 = eq(io.ID_EX_rd, io.rs2_sel) @[branchforward.scala 76:84]
      node _T_95 = and(_T_93, _T_94) @[branchforward.scala 76:68]
      node _T_96 = not(_T_95) @[branchforward.scala 76:5]
      node _T_97 = and(_T_90, _T_96) @[branchforward.scala 74:65]
      node _T_98 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 78:21]
      node _T_99 = eq(io.EX_MEM_rd, io.rs1_sel) @[branchforward.scala 78:54]
      node _T_100 = and(_T_98, _T_99) @[branchforward.scala 78:37]
      node _T_101 = eq(io.EX_MEM_rd, io.rs2_sel) @[branchforward.scala 78:87]
      node _T_102 = and(_T_100, _T_101) @[branchforward.scala 78:70]
      node _T_103 = not(_T_102) @[branchforward.scala 78:5]
      node _T_104 = and(_T_97, _T_103) @[branchforward.scala 76:101]
      node _T_105 = eq(io.MEM_WB_rd, io.rs1_sel) @[branchforward.scala 79:19]
      node _T_106 = and(_T_104, _T_105) @[branchforward.scala 78:104]
      node _T_107 = eq(io.MEM_WB_rd, io.rs2_sel) @[branchforward.scala 79:52]
      node _T_108 = and(_T_106, _T_107) @[branchforward.scala 79:35]
      when _T_108 : @[branchforward.scala 79:69]
        io.forward_rs1 <= UInt<2>("h03") @[branchforward.scala 81:20]
        io.forward_rs2 <= UInt<2>("h03") @[branchforward.scala 82:20]
        skip @[branchforward.scala 79:69]
      else : @[branchforward.scala 90:38]
        node _T_109 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[branchforward.scala 85:28]
        node _T_110 = neq(io.MEM_WB_rd, UInt<1>("h01")) @[branchforward.scala 85:59]
        node _T_111 = and(_T_109, _T_110) @[branchforward.scala 85:43]
        node _T_112 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 87:22]
        node _T_113 = eq(io.ID_EX_rd, io.rs2_sel) @[branchforward.scala 87:54]
        node _T_114 = and(_T_112, _T_113) @[branchforward.scala 87:38]
        node _T_115 = not(_T_114) @[branchforward.scala 87:7]
        node _T_116 = and(_T_111, _T_115) @[branchforward.scala 85:67]
        node _T_117 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 89:23]
        node _T_118 = eq(io.EX_MEM_rd, io.rs2_sel) @[branchforward.scala 89:56]
        node _T_119 = and(_T_117, _T_118) @[branchforward.scala 89:39]
        node _T_120 = not(_T_119) @[branchforward.scala 89:7]
        node _T_121 = and(_T_116, _T_120) @[branchforward.scala 87:71]
        node _T_122 = eq(io.MEM_WB_rd, io.rs2_sel) @[branchforward.scala 90:21]
        node _T_123 = and(_T_121, _T_122) @[branchforward.scala 89:73]
        when _T_123 : @[branchforward.scala 90:38]
          io.forward_rs2 <= UInt<2>("h03") @[branchforward.scala 92:22]
          skip @[branchforward.scala 90:38]
        else : @[branchforward.scala 100:38]
          node _T_124 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[branchforward.scala 95:28]
          node _T_125 = neq(io.MEM_WB_memread, UInt<1>("h01")) @[branchforward.scala 95:64]
          node _T_126 = and(_T_124, _T_125) @[branchforward.scala 95:43]
          node _T_127 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 97:22]
          node _T_128 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 97:54]
          node _T_129 = and(_T_127, _T_128) @[branchforward.scala 97:38]
          node _T_130 = not(_T_129) @[branchforward.scala 97:7]
          node _T_131 = and(_T_126, _T_130) @[branchforward.scala 95:72]
          node _T_132 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 99:23]
          node _T_133 = eq(io.EX_MEM_rd, io.rs1_sel) @[branchforward.scala 99:56]
          node _T_134 = and(_T_132, _T_133) @[branchforward.scala 99:39]
          node _T_135 = not(_T_134) @[branchforward.scala 99:7]
          node _T_136 = and(_T_131, _T_135) @[branchforward.scala 97:71]
          node _T_137 = eq(io.MEM_WB_rd, io.rs1_sel) @[branchforward.scala 100:21]
          node _T_138 = and(_T_136, _T_137) @[branchforward.scala 99:73]
          when _T_138 : @[branchforward.scala 100:38]
            io.forward_rs1 <= UInt<2>("h03") @[branchforward.scala 102:22]
            skip @[branchforward.scala 100:38]
          else : @[branchforward.scala 109:69]
            node _T_139 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[branchforward.scala 104:30]
            node _T_140 = eq(io.MEM_WB_memread, UInt<1>("h01")) @[branchforward.scala 104:66]
            node _T_141 = and(_T_139, _T_140) @[branchforward.scala 104:45]
            node _T_142 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 106:20]
            node _T_143 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 106:52]
            node _T_144 = and(_T_142, _T_143) @[branchforward.scala 106:36]
            node _T_145 = eq(io.ID_EX_rd, io.rs2_sel) @[branchforward.scala 106:84]
            node _T_146 = and(_T_144, _T_145) @[branchforward.scala 106:68]
            node _T_147 = not(_T_146) @[branchforward.scala 106:5]
            node _T_148 = and(_T_141, _T_147) @[branchforward.scala 104:74]
            node _T_149 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 108:21]
            node _T_150 = eq(io.EX_MEM_rd, io.rs1_sel) @[branchforward.scala 108:54]
            node _T_151 = and(_T_149, _T_150) @[branchforward.scala 108:37]
            node _T_152 = eq(io.EX_MEM_rd, io.rs2_sel) @[branchforward.scala 108:87]
            node _T_153 = and(_T_151, _T_152) @[branchforward.scala 108:70]
            node _T_154 = not(_T_153) @[branchforward.scala 108:5]
            node _T_155 = and(_T_148, _T_154) @[branchforward.scala 106:101]
            node _T_156 = eq(io.MEM_WB_rd, io.rs1_sel) @[branchforward.scala 109:19]
            node _T_157 = and(_T_155, _T_156) @[branchforward.scala 108:104]
            node _T_158 = eq(io.MEM_WB_rd, io.rs2_sel) @[branchforward.scala 109:52]
            node _T_159 = and(_T_157, _T_158) @[branchforward.scala 109:35]
            when _T_159 : @[branchforward.scala 109:69]
              io.forward_rs1 <= UInt<3>("h05") @[branchforward.scala 111:20]
              io.forward_rs2 <= UInt<3>("h05") @[branchforward.scala 112:20]
              skip @[branchforward.scala 109:69]
            else : @[branchforward.scala 120:38]
              node _T_160 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[branchforward.scala 115:28]
              node _T_161 = eq(io.MEM_WB_memread, UInt<1>("h01")) @[branchforward.scala 115:64]
              node _T_162 = and(_T_160, _T_161) @[branchforward.scala 115:43]
              node _T_163 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 117:22]
              node _T_164 = eq(io.ID_EX_rd, io.rs2_sel) @[branchforward.scala 117:54]
              node _T_165 = and(_T_163, _T_164) @[branchforward.scala 117:38]
              node _T_166 = not(_T_165) @[branchforward.scala 117:7]
              node _T_167 = and(_T_162, _T_166) @[branchforward.scala 115:72]
              node _T_168 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 119:23]
              node _T_169 = eq(io.EX_MEM_rd, io.rs2_sel) @[branchforward.scala 119:56]
              node _T_170 = and(_T_168, _T_169) @[branchforward.scala 119:39]
              node _T_171 = not(_T_170) @[branchforward.scala 119:7]
              node _T_172 = and(_T_167, _T_171) @[branchforward.scala 117:71]
              node _T_173 = eq(io.MEM_WB_rd, io.rs2_sel) @[branchforward.scala 120:21]
              node _T_174 = and(_T_172, _T_173) @[branchforward.scala 119:73]
              when _T_174 : @[branchforward.scala 120:38]
                io.forward_rs2 <= UInt<3>("h05") @[branchforward.scala 122:22]
                skip @[branchforward.scala 120:38]
              else : @[branchforward.scala 130:38]
                node _T_175 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[branchforward.scala 125:28]
                node _T_176 = eq(io.MEM_WB_memread, UInt<1>("h01")) @[branchforward.scala 125:64]
                node _T_177 = and(_T_175, _T_176) @[branchforward.scala 125:43]
                node _T_178 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 127:22]
                node _T_179 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 127:54]
                node _T_180 = and(_T_178, _T_179) @[branchforward.scala 127:38]
                node _T_181 = not(_T_180) @[branchforward.scala 127:7]
                node _T_182 = and(_T_177, _T_181) @[branchforward.scala 125:72]
                node _T_183 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 129:23]
                node _T_184 = eq(io.EX_MEM_memread, io.rs1_sel) @[branchforward.scala 129:61]
                node _T_185 = and(_T_183, _T_184) @[branchforward.scala 129:39]
                node _T_186 = not(_T_185) @[branchforward.scala 129:7]
                node _T_187 = and(_T_182, _T_186) @[branchforward.scala 127:71]
                node _T_188 = eq(io.MEM_WB_rd, io.rs1_sel) @[branchforward.scala 130:21]
                node _T_189 = and(_T_187, _T_188) @[branchforward.scala 129:77]
                when _T_189 : @[branchforward.scala 130:38]
                  io.forward_rs1 <= UInt<3>("h05") @[branchforward.scala 132:22]
                  skip @[branchforward.scala 130:38]
      skip @[branchforward.scala 21:30]
    else : @[branchforward.scala 137:35]
      node _T_190 = eq(io.ctrl_branch, UInt<1>("h00")) @[branchforward.scala 137:26]
      when _T_190 : @[branchforward.scala 137:35]
        node _T_191 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 139:26]
        node _T_192 = neq(io.ID_EX_memread, UInt<1>("h01")) @[branchforward.scala 139:61]
        node _T_193 = and(_T_191, _T_192) @[branchforward.scala 139:41]
        node _T_194 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 139:85]
        node _T_195 = and(_T_193, _T_194) @[branchforward.scala 139:69]
        when _T_195 : @[branchforward.scala 139:109]
          io.forward_rs1 <= UInt<3>("h06") @[branchforward.scala 140:26]
          skip @[branchforward.scala 139:109]
        node _T_196 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 144:27]
        node _T_197 = neq(io.EX_MEM_memread, UInt<1>("h01")) @[branchforward.scala 144:63]
        node _T_198 = and(_T_196, _T_197) @[branchforward.scala 144:42]
        node _T_199 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 145:26]
        node _T_200 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 145:58]
        node _T_201 = and(_T_199, _T_200) @[branchforward.scala 145:42]
        node _T_202 = not(_T_201) @[branchforward.scala 145:11]
        node _T_203 = and(_T_198, _T_202) @[branchforward.scala 144:71]
        node _T_204 = eq(io.EX_MEM_rd, io.rs1_sel) @[branchforward.scala 146:25]
        node _T_205 = and(_T_203, _T_204) @[branchforward.scala 145:75]
        when _T_205 : @[branchforward.scala 146:42]
          io.forward_rs1 <= UInt<3>("h07") @[branchforward.scala 148:26]
          skip @[branchforward.scala 146:42]
        else : @[branchforward.scala 153:44]
          node _T_206 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 151:34]
          node _T_207 = eq(io.EX_MEM_memread, UInt<1>("h01")) @[branchforward.scala 151:70]
          node _T_208 = and(_T_206, _T_207) @[branchforward.scala 151:49]
          node _T_209 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 152:28]
          node _T_210 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 152:60]
          node _T_211 = and(_T_209, _T_210) @[branchforward.scala 152:44]
          node _T_212 = not(_T_211) @[branchforward.scala 152:13]
          node _T_213 = and(_T_208, _T_212) @[branchforward.scala 151:78]
          node _T_214 = eq(io.EX_MEM_rd, io.rs1_sel) @[branchforward.scala 153:27]
          node _T_215 = and(_T_213, _T_214) @[branchforward.scala 152:77]
          when _T_215 : @[branchforward.scala 153:44]
            io.forward_rs1 <= UInt<4>("h09") @[branchforward.scala 155:28]
            skip @[branchforward.scala 153:44]
        node _T_216 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[branchforward.scala 161:27]
        node _T_217 = neq(io.MEM_WB_memread, UInt<1>("h01")) @[branchforward.scala 161:63]
        node _T_218 = and(_T_216, _T_217) @[branchforward.scala 161:42]
        node _T_219 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 163:26]
        node _T_220 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 163:58]
        node _T_221 = and(_T_219, _T_220) @[branchforward.scala 163:42]
        node _T_222 = not(_T_221) @[branchforward.scala 163:11]
        node _T_223 = and(_T_218, _T_222) @[branchforward.scala 161:71]
        node _T_224 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 165:27]
        node _T_225 = eq(io.EX_MEM_rd, io.rs1_sel) @[branchforward.scala 165:60]
        node _T_226 = and(_T_224, _T_225) @[branchforward.scala 165:43]
        node _T_227 = not(_T_226) @[branchforward.scala 165:11]
        node _T_228 = and(_T_223, _T_227) @[branchforward.scala 163:75]
        node _T_229 = eq(io.MEM_WB_rd, io.rs1_sel) @[branchforward.scala 166:25]
        node _T_230 = and(_T_228, _T_229) @[branchforward.scala 165:77]
        when _T_230 : @[branchforward.scala 166:42]
          io.forward_rs1 <= UInt<4>("h08") @[branchforward.scala 168:26]
          skip @[branchforward.scala 166:42]
        else : @[branchforward.scala 176:42]
          node _T_231 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[branchforward.scala 171:35]
          node _T_232 = eq(io.MEM_WB_memread, UInt<1>("h01")) @[branchforward.scala 171:71]
          node _T_233 = and(_T_231, _T_232) @[branchforward.scala 171:50]
          node _T_234 = neq(io.ID_EX_rd, UInt<1>("h00")) @[branchforward.scala 173:26]
          node _T_235 = eq(io.ID_EX_rd, io.rs1_sel) @[branchforward.scala 173:58]
          node _T_236 = and(_T_234, _T_235) @[branchforward.scala 173:42]
          node _T_237 = not(_T_236) @[branchforward.scala 173:11]
          node _T_238 = and(_T_233, _T_237) @[branchforward.scala 171:79]
          node _T_239 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[branchforward.scala 175:27]
          node _T_240 = eq(io.EX_MEM_rd, io.rs1_sel) @[branchforward.scala 175:60]
          node _T_241 = and(_T_239, _T_240) @[branchforward.scala 175:43]
          node _T_242 = not(_T_241) @[branchforward.scala 175:11]
          node _T_243 = and(_T_238, _T_242) @[branchforward.scala 173:75]
          node _T_244 = eq(io.MEM_WB_rd, io.rs1_sel) @[branchforward.scala 176:25]
          node _T_245 = and(_T_243, _T_244) @[branchforward.scala 175:77]
          when _T_245 : @[branchforward.scala 176:42]
            io.forward_rs1 <= UInt<4>("h0a") @[branchforward.scala 178:26]
            skip @[branchforward.scala 176:42]
        skip @[branchforward.scala 137:35]
    
  module StructuralDetector : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip MEM_WB_regwrite : UInt<1>, flip MEM_WB_rd : UInt<5>, fwd_rs1 : UInt<1>, fwd_rs2 : UInt<1>}
    
    node _T = eq(io.MEM_WB_regwrite, UInt<1>("h01")) @[structural.scala 15:27]
    node _T_1 = eq(io.MEM_WB_rd, io.rs1_sel) @[structural.scala 15:52]
    node _T_2 = and(_T, _T_1) @[structural.scala 15:35]
    when _T_2 : @[structural.scala 15:68]
      io.fwd_rs1 <= UInt<1>("h01") @[structural.scala 16:16]
      skip @[structural.scala 15:68]
    else : @[structural.scala 17:16]
      io.fwd_rs1 <= UInt<1>("h00") @[structural.scala 18:16]
      skip @[structural.scala 17:16]
    node _T_3 = eq(io.MEM_WB_regwrite, UInt<1>("h01")) @[structural.scala 20:27]
    node _T_4 = eq(io.MEM_WB_rd, io.rs2_sel) @[structural.scala 20:51]
    node _T_5 = and(_T_3, _T_4) @[structural.scala 20:35]
    when _T_5 : @[structural.scala 20:67]
      io.fwd_rs2 <= UInt<1>("h01") @[structural.scala 21:16]
      skip @[structural.scala 20:67]
    else : @[structural.scala 22:16]
      io.fwd_rs2 <= UInt<1>("h00") @[structural.scala 23:16]
      skip @[structural.scala 22:16]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {address : UInt<32>}
    
    inst pc_module of pc @[toppipe.scala 9:27]
    pc_module.clock <= clock
    pc_module.reset <= reset
    inst aluctrl_module of alucontrol @[toppipe.scala 10:32]
    aluctrl_module.clock <= clock
    aluctrl_module.reset <= reset
    inst alu_module of ALU @[toppipe.scala 11:28]
    alu_module.clock <= clock
    alu_module.reset <= reset
    inst control_module of controller @[toppipe.scala 12:32]
    control_module.clock <= clock
    control_module.reset <= reset
    inst imem_module of imem @[toppipe.scala 13:29]
    imem_module.clock <= clock
    imem_module.reset <= reset
    inst immediate_module of immediate @[toppipe.scala 14:34]
    immediate_module.clock <= clock
    immediate_module.reset <= reset
    inst jalr_module of JALR @[toppipe.scala 15:29]
    jalr_module.clock <= clock
    jalr_module.reset <= reset
    inst register_module of register @[toppipe.scala 16:33]
    register_module.clock <= clock
    register_module.reset <= reset
    inst smem_module of memory @[toppipe.scala 17:29]
    smem_module.clock <= clock
    smem_module.reset <= reset
    inst if_id_module of IF_ID_Reg @[toppipe.scala 21:28]
    if_id_module.clock <= clock
    if_id_module.reset <= reset
    inst id_ex_module of ID_EX_Reg @[toppipe.scala 22:29]
    id_ex_module.clock <= clock
    id_ex_module.reset <= reset
    inst ex_mem_module of EX_MEM_Reg @[toppipe.scala 23:30]
    ex_mem_module.clock <= clock
    ex_mem_module.reset <= reset
    inst mem_wb_moodule of MEM_WB_Reg @[toppipe.scala 24:30]
    mem_wb_moodule.clock <= clock
    mem_wb_moodule.reset <= reset
    inst forward_module of ForwardUnit @[toppipe.scala 26:34]
    forward_module.clock <= clock
    forward_module.reset <= reset
    inst hazard_module of HazardDetection @[toppipe.scala 27:35]
    hazard_module.clock <= clock
    hazard_module.reset <= reset
    inst branchlogic_module of BranchLogic @[toppipe.scala 28:39]
    branchlogic_module.clock <= clock
    branchlogic_module.reset <= reset
    inst branchforward_module of BranchForward @[toppipe.scala 29:41]
    branchforward_module.clock <= clock
    branchforward_module.reset <= reset
    inst stractural_module of StructuralDetector @[toppipe.scala 30:38]
    stractural_module.clock <= clock
    stractural_module.reset <= reset
    forward_module.io.EX_MEM_rd <= ex_mem_module.io.rd_out @[toppipe.scala 33:33]
    forward_module.io.ID_EX_rs1 <= id_ex_module.io.rs1_out @[toppipe.scala 34:33]
    forward_module.io.ID_EX_rs2 <= id_ex_module.io.rs2_out @[toppipe.scala 35:33]
    forward_module.io.EX_MEM_regwrite <= ex_mem_module.io.regwrite_out @[toppipe.scala 36:39]
    forward_module.io.MEM_WB_rd <= mem_wb_moodule.io.rd_out @[toppipe.scala 37:33]
    forward_module.io.MEM_WB_regwrite <= mem_wb_moodule.io.regwrite_out @[toppipe.scala 38:39]
    pc_module.io.addr <= pc_module.io.pc_out4 @[toppipe.scala 41:23]
    node _T = bits(pc_module.io.pc_out, 11, 2) @[toppipe.scala 43:48]
    imem_module.io.address <= _T @[toppipe.scala 43:27]
    if_id_module.io.pc_in <= pc_module.io.pc_out @[toppipe.scala 47:26]
    if_id_module.io.pc_in4 <= pc_module.io.pc_out4 @[toppipe.scala 48:27]
    if_id_module.io.instr_in <= imem_module.io.readdata @[toppipe.scala 49:29]
    node _T_1 = bits(if_id_module.io.instr_out, 6, 0) @[toppipe.scala 51:52]
    control_module.io.in <= _T_1 @[toppipe.scala 51:25]
    io.address <= imem_module.io.address @[toppipe.scala 52:16]
    node _T_2 = bits(if_id_module.io.instr_out, 19, 15) @[toppipe.scala 55:54]
    register_module.io.rs1 <= _T_2 @[toppipe.scala 55:27]
    node _T_3 = bits(if_id_module.io.instr_out, 24, 20) @[toppipe.scala 56:54]
    register_module.io.rs2 <= _T_3 @[toppipe.scala 56:27]
    immediate_module.io.instr <= if_id_module.io.instr_out @[toppipe.scala 59:30]
    immediate_module.io.pc <= if_id_module.io.pc_out @[toppipe.scala 60:27]
    aluctrl_module.io.alu <= id_ex_module.io.aluop_out @[toppipe.scala 63:27]
    aluctrl_module.io.f7 <= id_ex_module.io.f7_out @[toppipe.scala 64:26]
    aluctrl_module.io.f3 <= id_ex_module.io.f3_out @[toppipe.scala 65:25]
    node _T_4 = bits(if_id_module.io.instr_out, 19, 15) @[toppipe.scala 68:62]
    stractural_module.io.rs1_sel <= _T_4 @[toppipe.scala 68:34]
    node _T_5 = bits(if_id_module.io.instr_out, 24, 20) @[toppipe.scala 69:62]
    stractural_module.io.rs2_sel <= _T_5 @[toppipe.scala 69:34]
    stractural_module.io.MEM_WB_rd <= mem_wb_moodule.io.rd_out @[toppipe.scala 70:36]
    stractural_module.io.MEM_WB_regwrite <= mem_wb_moodule.io.regwrite_out @[toppipe.scala 71:42]
    node _T_6 = eq(stractural_module.io.fwd_rs1, UInt<1>("h01")) @[toppipe.scala 75:39]
    when _T_6 : @[toppipe.scala 75:48]
      id_ex_module.io.rd1_in <= register_module.io.writedata @[toppipe.scala 76:28]
      skip @[toppipe.scala 75:48]
    else : @[toppipe.scala 77:18]
      id_ex_module.io.rd1_in <= register_module.io.rd1 @[toppipe.scala 78:28]
      skip @[toppipe.scala 77:18]
    node _T_7 = eq(stractural_module.io.fwd_rs2, UInt<1>("h01")) @[toppipe.scala 81:39]
    when _T_7 : @[toppipe.scala 81:48]
      id_ex_module.io.rd2_in <= register_module.io.writedata @[toppipe.scala 82:28]
      skip @[toppipe.scala 81:48]
    else : @[toppipe.scala 83:18]
      id_ex_module.io.rd2_in <= register_module.io.rd2 @[toppipe.scala 84:28]
      skip @[toppipe.scala 83:18]
    node _T_8 = eq(hazard_module.io.ctrl_forward, UInt<1>("h01")) @[toppipe.scala 88:40]
    when _T_8 : @[toppipe.scala 88:52]
      id_ex_module.io.memwrite_in <= UInt<1>("h00") @[toppipe.scala 89:37]
      id_ex_module.io.memread_in <= UInt<1>("h00") @[toppipe.scala 90:36]
      id_ex_module.io.branch_in <= UInt<1>("h00") @[toppipe.scala 91:35]
      id_ex_module.io.regwrite_in <= UInt<1>("h00") @[toppipe.scala 92:37]
      id_ex_module.io.memtoreg_in <= UInt<1>("h00") @[toppipe.scala 93:37]
      id_ex_module.io.aluop_in <= UInt<1>("h00") @[toppipe.scala 94:34]
      id_ex_module.io.opA_in <= UInt<1>("h00") @[toppipe.scala 95:32]
      id_ex_module.io.opB_in <= UInt<1>("h00") @[toppipe.scala 96:32]
      id_ex_module.io.nextpcsel_in <= UInt<1>("h00") @[toppipe.scala 97:38]
      skip @[toppipe.scala 88:52]
    else : @[toppipe.scala 99:18]
      id_ex_module.io.memwrite_in <= control_module.io.memwrite @[toppipe.scala 100:37]
      id_ex_module.io.memread_in <= control_module.io.memread @[toppipe.scala 101:36]
      id_ex_module.io.branch_in <= control_module.io.branch @[toppipe.scala 102:36]
      id_ex_module.io.regwrite_in <= control_module.io.regwrite @[toppipe.scala 103:37]
      id_ex_module.io.memtoreg_in <= control_module.io.memtoreg @[toppipe.scala 104:37]
      id_ex_module.io.aluop_in <= control_module.io.aluop @[toppipe.scala 105:34]
      id_ex_module.io.opA_in <= control_module.io.opA @[toppipe.scala 106:32]
      id_ex_module.io.opB_in <= control_module.io.opB @[toppipe.scala 107:32]
      id_ex_module.io.nextpcsel_in <= control_module.io.nextpcsel @[toppipe.scala 108:38]
      skip @[toppipe.scala 99:18]
    branchforward_module.io.ID_EX_rd <= id_ex_module.io.writereg_out @[toppipe.scala 112:38]
    branchforward_module.io.ID_EX_memread <= id_ex_module.io.memread_out @[toppipe.scala 113:43]
    branchforward_module.io.EX_MEM_rd <= ex_mem_module.io.rd_out @[toppipe.scala 114:39]
    branchforward_module.io.MEM_WB_rd <= mem_wb_moodule.io.rd_out @[toppipe.scala 115:39]
    branchforward_module.io.EX_MEM_memread <= ex_mem_module.io.memread_out @[toppipe.scala 116:44]
    branchforward_module.io.MEM_WB_memread <= mem_wb_moodule.io.memread_out @[toppipe.scala 117:44]
    node _T_9 = bits(if_id_module.io.instr_out, 19, 15) @[toppipe.scala 118:65]
    branchforward_module.io.rs1_sel <= _T_9 @[toppipe.scala 118:37]
    node _T_10 = bits(if_id_module.io.instr_out, 24, 20) @[toppipe.scala 119:65]
    branchforward_module.io.rs2_sel <= _T_10 @[toppipe.scala 119:37]
    branchforward_module.io.ctrl_branch <= control_module.io.branch @[toppipe.scala 120:41]
    branchlogic_module.io.in_rs1 <= register_module.io.rd1 @[toppipe.scala 123:34]
    branchlogic_module.io.in_rs2 <= register_module.io.rd2 @[toppipe.scala 124:34]
    node _T_11 = bits(if_id_module.io.instr_out, 14, 12) @[toppipe.scala 125:64]
    branchlogic_module.io.in_func3 <= _T_11 @[toppipe.scala 125:36]
    node _T_12 = asUInt(immediate_module.io.iimmd_se) @[toppipe.scala 132:55]
    jalr_module.io.addr <= _T_12 @[toppipe.scala 132:24]
    node _T_13 = asUInt(register_module.io.rd1) @[toppipe.scala 133:47]
    jalr_module.io.pc <= _T_13 @[toppipe.scala 133:22]
    node _T_14 = eq(branchforward_module.io.forward_rs1, UInt<1>("h00")) @[toppipe.scala 138:46]
    when _T_14 : @[toppipe.scala 138:61]
      branchlogic_module.io.in_rs1 <= register_module.io.rd1 @[toppipe.scala 140:38]
      node _T_15 = asUInt(register_module.io.rd1) @[toppipe.scala 141:55]
      jalr_module.io.addr <= _T_15 @[toppipe.scala 141:29]
      skip @[toppipe.scala 138:61]
    else : @[toppipe.scala 143:68]
      node _T_16 = eq(branchforward_module.io.forward_rs1, UInt<1>("h01")) @[toppipe.scala 143:53]
      when _T_16 : @[toppipe.scala 143:68]
        node _T_17 = asSInt(alu_module.io.out) @[toppipe.scala 145:59]
        branchlogic_module.io.in_rs1 <= _T_17 @[toppipe.scala 145:38]
        node _T_18 = asUInt(register_module.io.rd1) @[toppipe.scala 146:55]
        jalr_module.io.addr <= _T_18 @[toppipe.scala 146:29]
        skip @[toppipe.scala 143:68]
      else : @[toppipe.scala 148:68]
        node _T_19 = eq(branchforward_module.io.forward_rs1, UInt<2>("h02")) @[toppipe.scala 148:53]
        when _T_19 : @[toppipe.scala 148:68]
          node _T_20 = asSInt(ex_mem_module.io.alu_out) @[toppipe.scala 150:66]
          branchlogic_module.io.in_rs1 <= _T_20 @[toppipe.scala 150:38]
          node _T_21 = asUInt(register_module.io.rd1) @[toppipe.scala 151:55]
          jalr_module.io.addr <= _T_21 @[toppipe.scala 151:29]
          skip @[toppipe.scala 148:68]
        else : @[toppipe.scala 153:68]
          node _T_22 = eq(branchforward_module.io.forward_rs1, UInt<2>("h03")) @[toppipe.scala 153:53]
          when _T_22 : @[toppipe.scala 153:68]
            branchlogic_module.io.in_rs1 <= register_module.io.writedata @[toppipe.scala 155:38]
            node _T_23 = asUInt(register_module.io.rd1) @[toppipe.scala 156:55]
            jalr_module.io.addr <= _T_23 @[toppipe.scala 156:29]
            skip @[toppipe.scala 153:68]
          else : @[toppipe.scala 158:68]
            node _T_24 = eq(branchforward_module.io.forward_rs1, UInt<3>("h04")) @[toppipe.scala 158:53]
            when _T_24 : @[toppipe.scala 158:68]
              node _T_25 = asSInt(smem_module.io.output) @[toppipe.scala 160:63]
              branchlogic_module.io.in_rs1 <= _T_25 @[toppipe.scala 160:38]
              node _T_26 = asUInt(register_module.io.rd1) @[toppipe.scala 161:55]
              jalr_module.io.addr <= _T_26 @[toppipe.scala 161:29]
              skip @[toppipe.scala 158:68]
            else : @[toppipe.scala 163:68]
              node _T_27 = eq(branchforward_module.io.forward_rs1, UInt<3>("h05")) @[toppipe.scala 163:53]
              when _T_27 : @[toppipe.scala 163:68]
                branchlogic_module.io.in_rs1 <= register_module.io.writedata @[toppipe.scala 165:37]
                node _T_28 = asUInt(register_module.io.rd1) @[toppipe.scala 166:55]
                jalr_module.io.addr <= _T_28 @[toppipe.scala 166:29]
                skip @[toppipe.scala 163:68]
              else : @[toppipe.scala 168:67]
                node _T_29 = eq(branchforward_module.io.forward_rs1, UInt<3>("h06")) @[toppipe.scala 168:52]
                when _T_29 : @[toppipe.scala 168:67]
                  jalr_module.io.addr <= alu_module.io.out @[toppipe.scala 170:29]
                  branchlogic_module.io.in_rs1 <= register_module.io.rd1 @[toppipe.scala 171:38]
                  skip @[toppipe.scala 168:67]
                else : @[toppipe.scala 173:68]
                  node _T_30 = eq(branchforward_module.io.forward_rs1, UInt<3>("h07")) @[toppipe.scala 173:53]
                  when _T_30 : @[toppipe.scala 173:68]
                    jalr_module.io.addr <= ex_mem_module.io.alu_out @[toppipe.scala 175:29]
                    branchlogic_module.io.in_rs1 <= register_module.io.rd1 @[toppipe.scala 176:38]
                    skip @[toppipe.scala 173:68]
                  else : @[toppipe.scala 178:68]
                    node _T_31 = eq(branchforward_module.io.forward_rs1, UInt<4>("h08")) @[toppipe.scala 178:53]
                    when _T_31 : @[toppipe.scala 178:68]
                      node _T_32 = asUInt(register_module.io.writedata) @[toppipe.scala 180:61]
                      jalr_module.io.addr <= _T_32 @[toppipe.scala 180:29]
                      branchlogic_module.io.in_rs1 <= register_module.io.rd1 @[toppipe.scala 181:37]
                      skip @[toppipe.scala 178:68]
                    else : @[toppipe.scala 183:68]
                      node _T_33 = eq(branchforward_module.io.forward_rs1, UInt<4>("h09")) @[toppipe.scala 183:53]
                      when _T_33 : @[toppipe.scala 183:68]
                        jalr_module.io.addr <= smem_module.io.output @[toppipe.scala 185:29]
                        branchlogic_module.io.in_rs1 <= register_module.io.rd1 @[toppipe.scala 186:38]
                        skip @[toppipe.scala 183:68]
                      else : @[toppipe.scala 188:68]
                        node _T_34 = eq(branchforward_module.io.forward_rs1, UInt<4>("h0a")) @[toppipe.scala 188:53]
                        when _T_34 : @[toppipe.scala 188:68]
                          node _T_35 = asUInt(register_module.io.writedata) @[toppipe.scala 190:61]
                          jalr_module.io.addr <= _T_35 @[toppipe.scala 190:29]
                          branchlogic_module.io.in_rs1 <= register_module.io.rd1 @[toppipe.scala 191:38]
                          skip @[toppipe.scala 188:68]
                        else : @[toppipe.scala 193:17]
                          branchlogic_module.io.in_rs1 <= register_module.io.rd1 @[toppipe.scala 194:38]
                          node _T_36 = asUInt(register_module.io.rd1) @[toppipe.scala 195:55]
                          jalr_module.io.addr <= _T_36 @[toppipe.scala 195:29]
                          skip @[toppipe.scala 193:17]
    node _T_37 = eq(branchforward_module.io.forward_rs2, UInt<1>("h00")) @[toppipe.scala 200:46]
    when _T_37 : @[toppipe.scala 200:60]
      branchlogic_module.io.in_rs2 <= register_module.io.rd2 @[toppipe.scala 202:39]
      skip @[toppipe.scala 200:60]
    else : @[toppipe.scala 204:67]
      node _T_38 = eq(branchforward_module.io.forward_rs2, UInt<1>("h01")) @[toppipe.scala 204:53]
      when _T_38 : @[toppipe.scala 204:67]
        node _T_39 = asSInt(alu_module.io.out) @[toppipe.scala 206:60]
        branchlogic_module.io.in_rs2 <= _T_39 @[toppipe.scala 206:39]
        skip @[toppipe.scala 204:67]
      else : @[toppipe.scala 208:67]
        node _T_40 = eq(branchforward_module.io.forward_rs2, UInt<2>("h02")) @[toppipe.scala 208:53]
        when _T_40 : @[toppipe.scala 208:67]
          node _T_41 = asSInt(ex_mem_module.io.alu_out) @[toppipe.scala 210:67]
          branchlogic_module.io.in_rs2 <= _T_41 @[toppipe.scala 210:39]
          skip @[toppipe.scala 208:67]
        else : @[toppipe.scala 212:67]
          node _T_42 = eq(branchforward_module.io.forward_rs2, UInt<2>("h03")) @[toppipe.scala 212:53]
          when _T_42 : @[toppipe.scala 212:67]
            branchlogic_module.io.in_rs2 <= register_module.io.writedata @[toppipe.scala 214:39]
            skip @[toppipe.scala 212:67]
          else : @[toppipe.scala 216:67]
            node _T_43 = eq(branchforward_module.io.forward_rs2, UInt<3>("h04")) @[toppipe.scala 216:53]
            when _T_43 : @[toppipe.scala 216:67]
              node _T_44 = asSInt(smem_module.io.output) @[toppipe.scala 218:63]
              branchlogic_module.io.in_rs2 <= _T_44 @[toppipe.scala 218:38]
              skip @[toppipe.scala 216:67]
            else : @[toppipe.scala 220:67]
              node _T_45 = eq(branchforward_module.io.forward_rs2, UInt<3>("h05")) @[toppipe.scala 220:53]
              when _T_45 : @[toppipe.scala 220:67]
                branchlogic_module.io.in_rs2 <= register_module.io.writedata @[toppipe.scala 222:39]
                skip @[toppipe.scala 220:67]
              else : @[toppipe.scala 224:16]
                branchlogic_module.io.in_rs2 <= register_module.io.rd2 @[toppipe.scala 225:39]
                skip @[toppipe.scala 224:16]
    id_ex_module.io.memwrite_in <= control_module.io.memwrite @[toppipe.scala 229:32]
    id_ex_module.io.memread_in <= control_module.io.memread @[toppipe.scala 230:31]
    id_ex_module.io.memtoreg_in <= control_module.io.memtoreg @[toppipe.scala 231:32]
    id_ex_module.io.regwrite_in <= control_module.io.regwrite @[toppipe.scala 232:32]
    node _T_46 = asUInt(register_module.io.rd1) @[toppipe.scala 233:54]
    id_ex_module.io.opA_in <= _T_46 @[toppipe.scala 233:28]
    node _T_47 = asUInt(register_module.io.rd2) @[toppipe.scala 234:52]
    id_ex_module.io.opB_in <= _T_47 @[toppipe.scala 234:27]
    node _T_48 = bits(if_id_module.io.instr_out, 14, 12) @[toppipe.scala 235:53]
    id_ex_module.io.f3_in <= _T_48 @[toppipe.scala 235:26]
    node _T_49 = bits(if_id_module.io.instr_out, 30, 30) @[toppipe.scala 236:53]
    id_ex_module.io.f7_in <= _T_49 @[toppipe.scala 236:26]
    id_ex_module.io.opA_in <= control_module.io.opA @[toppipe.scala 237:27]
    id_ex_module.io.opB_in <= control_module.io.opB @[toppipe.scala 238:27]
    id_ex_module.io.aluop_in <= control_module.io.aluop @[toppipe.scala 239:34]
    id_ex_module.io.branch_in <= control_module.io.branch @[toppipe.scala 240:35]
    id_ex_module.io.nextpcsel_in <= control_module.io.nextpcsel @[toppipe.scala 241:38]
    id_ex_module.io.pc_in <= if_id_module.io.pc_out @[toppipe.scala 243:26]
    id_ex_module.io.pc_in4 <= if_id_module.io.pc_out4 @[toppipe.scala 244:27]
    node _T_50 = bits(if_id_module.io.instr_out, 19, 15) @[toppipe.scala 245:54]
    id_ex_module.io.rs1_in <= _T_50 @[toppipe.scala 245:27]
    node _T_51 = bits(if_id_module.io.instr_out, 24, 20) @[toppipe.scala 246:54]
    id_ex_module.io.rs2_in <= _T_51 @[toppipe.scala 246:27]
    node _T_52 = bits(if_id_module.io.instr_out, 11, 7) @[toppipe.scala 247:59]
    id_ex_module.io.writereg_in <= _T_52 @[toppipe.scala 247:32]
    id_ex_module.io.rd1_in <= register_module.io.rd1 @[toppipe.scala 248:28]
    id_ex_module.io.rd2_in <= register_module.io.rd2 @[toppipe.scala 249:31]
    hazard_module.io.IF_ID_instr <= if_id_module.io.instr_out @[toppipe.scala 253:34]
    hazard_module.io.ID_EX_memread <= id_ex_module.io.memread_out @[toppipe.scala 254:36]
    hazard_module.io.ID_EX_rd <= id_ex_module.io.writereg_out @[toppipe.scala 255:31]
    hazard_module.io.pc_in <= if_id_module.io.pc_out4 @[toppipe.scala 256:28]
    hazard_module.io.current_pc_in <= if_id_module.io.pc_out @[toppipe.scala 257:36]
    node _T_53 = eq(hazard_module.io.instr_forward, UInt<1>("h01")) @[toppipe.scala 259:41]
    when _T_53 : @[toppipe.scala 259:53]
      if_id_module.io.instr_in <= hazard_module.io.instr_out @[toppipe.scala 260:30]
      if_id_module.io.pc_in <= hazard_module.io.current_pc_out @[toppipe.scala 261:27]
      skip @[toppipe.scala 259:53]
    else : @[toppipe.scala 262:17]
      if_id_module.io.instr_in <= imem_module.io.readdata @[toppipe.scala 263:34]
      skip @[toppipe.scala 262:17]
    node _T_54 = eq(hazard_module.io.pc_forward, UInt<1>("h01")) @[toppipe.scala 267:38]
    when _T_54 : @[toppipe.scala 267:50]
      pc_module.io.addr <= hazard_module.io.pc_out @[toppipe.scala 268:23]
      skip @[toppipe.scala 267:50]
    else : @[toppipe.scala 269:17]
      node _T_55 = eq(control_module.io.nextpcsel, UInt<1>("h01")) @[toppipe.scala 270:38]
      when _T_55 : @[toppipe.scala 270:51]
        node _T_56 = eq(branchlogic_module.io.output, UInt<1>("h01")) @[toppipe.scala 271:41]
        node _T_57 = eq(control_module.io.branch, UInt<1>("h01")) @[toppipe.scala 271:77]
        node _T_58 = and(_T_56, _T_57) @[toppipe.scala 271:49]
        when _T_58 : @[toppipe.scala 271:86]
          node _T_59 = asUInt(immediate_module.io.sbimmd_se) @[toppipe.scala 272:60]
          pc_module.io.addr <= _T_59 @[toppipe.scala 272:27]
          if_id_module.io.pc_in <= UInt<1>("h00") @[toppipe.scala 273:31]
          if_id_module.io.pc_in4 <= UInt<1>("h00") @[toppipe.scala 274:32]
          if_id_module.io.instr_in <= UInt<1>("h00") @[toppipe.scala 275:34]
          skip @[toppipe.scala 271:86]
        else : @[toppipe.scala 276:19]
          pc_module.io.addr <= pc_module.io.pc_out4 @[toppipe.scala 277:27]
          skip @[toppipe.scala 276:19]
        skip @[toppipe.scala 270:51]
      else : @[toppipe.scala 280:59]
        node _T_60 = eq(control_module.io.nextpcsel, UInt<2>("h02")) @[toppipe.scala 280:46]
        when _T_60 : @[toppipe.scala 280:59]
          node _T_61 = asUInt(immediate_module.io.ujimmd_se) @[toppipe.scala 281:58]
          pc_module.io.addr <= _T_61 @[toppipe.scala 281:25]
          if_id_module.io.pc_in <= UInt<1>("h00") @[toppipe.scala 282:29]
          if_id_module.io.pc_in4 <= UInt<1>("h00") @[toppipe.scala 283:30]
          if_id_module.io.instr_in <= UInt<1>("h00") @[toppipe.scala 284:32]
          skip @[toppipe.scala 280:59]
        else : @[toppipe.scala 285:58]
          node _T_62 = eq(control_module.io.nextpcsel, UInt<2>("h03")) @[toppipe.scala 285:45]
          when _T_62 : @[toppipe.scala 285:58]
            pc_module.io.addr <= jalr_module.io.out @[toppipe.scala 286:25]
            if_id_module.io.pc_in <= UInt<1>("h00") @[toppipe.scala 287:29]
            if_id_module.io.pc_in4 <= UInt<1>("h00") @[toppipe.scala 288:30]
            if_id_module.io.instr_in <= UInt<1>("h00") @[toppipe.scala 289:32]
            skip @[toppipe.scala 285:58]
          else : @[toppipe.scala 291:17]
            pc_module.io.addr <= pc_module.io.pc_out4 @[toppipe.scala 292:25]
            skip @[toppipe.scala 291:17]
      skip @[toppipe.scala 269:17]
    ex_mem_module.io.regwrite_in <= id_ex_module.io.regwrite_out @[toppipe.scala 296:34]
    ex_mem_module.io.memtoreg_in <= id_ex_module.io.memtoreg_out @[toppipe.scala 297:34]
    ex_mem_module.io.stdata_in <= id_ex_module.io.rd2_out @[toppipe.scala 298:32]
    ex_mem_module.io.alu_in <= alu_module.io.out @[toppipe.scala 299:29]
    ex_mem_module.io.rd_in <= id_ex_module.io.writereg_out @[toppipe.scala 300:28]
    node _T_63 = eq(id_ex_module.io.opA_out, UInt<2>("h02")) @[toppipe.scala 304:35]
    when _T_63 : @[toppipe.scala 304:48]
      alu_module.io.in_A <= id_ex_module.io.pc_out4 @[toppipe.scala 305:28]
      skip @[toppipe.scala 304:48]
    else : @[toppipe.scala 306:17]
      node _T_64 = eq(forward_module.io.forward_A, UInt<1>("h00")) @[toppipe.scala 308:38]
      when _T_64 : @[toppipe.scala 308:51]
        node _T_65 = asUInt(id_ex_module.io.rd1_out) @[toppipe.scala 309:52]
        alu_module.io.in_A <= _T_65 @[toppipe.scala 309:25]
        skip @[toppipe.scala 308:51]
      else : @[toppipe.scala 310:58]
        node _T_66 = eq(forward_module.io.forward_A, UInt<1>("h01")) @[toppipe.scala 310:45]
        when _T_66 : @[toppipe.scala 310:58]
          alu_module.io.in_A <= ex_mem_module.io.alu_out @[toppipe.scala 311:25]
          skip @[toppipe.scala 310:58]
        else : @[toppipe.scala 312:58]
          node _T_67 = eq(forward_module.io.forward_A, UInt<2>("h02")) @[toppipe.scala 312:45]
          when _T_67 : @[toppipe.scala 312:58]
            node _T_68 = asUInt(register_module.io.writedata) @[toppipe.scala 313:56]
            alu_module.io.in_A <= _T_68 @[toppipe.scala 313:24]
            skip @[toppipe.scala 312:58]
          else : @[toppipe.scala 314:18]
            node _T_69 = asUInt(id_ex_module.io.rd1_out) @[toppipe.scala 315:52]
            alu_module.io.in_A <= _T_69 @[toppipe.scala 315:25]
            skip @[toppipe.scala 314:18]
      skip @[toppipe.scala 306:17]
    node _T_70 = eq(control_module.io.extendsel, UInt<1>("h00")) @[toppipe.scala 320:39]
    when _T_70 : @[toppipe.scala 320:51]
      id_ex_module.io.immd_in <= immediate_module.io.iimmd_se @[toppipe.scala 321:41]
      skip @[toppipe.scala 320:51]
    else : @[toppipe.scala 322:60]
      node _T_71 = eq(control_module.io.extendsel, UInt<1>("h01")) @[toppipe.scala 322:48]
      when _T_71 : @[toppipe.scala 322:60]
        id_ex_module.io.immd_in <= immediate_module.io.simmd_se @[toppipe.scala 323:41]
        skip @[toppipe.scala 322:60]
      else : @[toppipe.scala 324:60]
        node _T_72 = eq(control_module.io.extendsel, UInt<2>("h02")) @[toppipe.scala 324:48]
        when _T_72 : @[toppipe.scala 324:60]
          id_ex_module.io.immd_in <= immediate_module.io.uimmd_se @[toppipe.scala 325:41]
          skip @[toppipe.scala 324:60]
        else : @[toppipe.scala 326:20]
          id_ex_module.io.immd_in <= asSInt(UInt<1>("h00")) @[toppipe.scala 326:45]
          skip @[toppipe.scala 326:20]
    alu_module.io.in_B <= UInt<1>("h00") @[toppipe.scala 330:24]
    node _T_73 = eq(id_ex_module.io.opB_out, UInt<1>("h01")) @[toppipe.scala 331:34]
    when _T_73 : @[toppipe.scala 331:42]
      node _T_74 = asUInt(id_ex_module.io.immd_out) @[toppipe.scala 332:60]
      alu_module.io.in_B <= _T_74 @[toppipe.scala 332:32]
      node _T_75 = eq(forward_module.io.forward_B, UInt<1>("h00")) @[toppipe.scala 334:42]
      when _T_75 : @[toppipe.scala 334:54]
        ex_mem_module.io.stdata_in <= id_ex_module.io.rd2_out @[toppipe.scala 334:82]
        skip @[toppipe.scala 334:54]
      else : @[toppipe.scala 335:67]
        node _T_76 = eq(forward_module.io.forward_B, UInt<1>("h01")) @[toppipe.scala 335:53]
        when _T_76 : @[toppipe.scala 335:67]
          node _T_77 = asSInt(ex_mem_module.io.alu_out) @[toppipe.scala 335:123]
          ex_mem_module.io.stdata_in <= _T_77 @[toppipe.scala 335:95]
          skip @[toppipe.scala 335:67]
        else : @[toppipe.scala 336:64]
          node _T_78 = eq(forward_module.io.forward_B, UInt<2>("h02")) @[toppipe.scala 336:52]
          when _T_78 : @[toppipe.scala 336:64]
            ex_mem_module.io.stdata_in <= register_module.io.writedata @[toppipe.scala 336:92]
            skip @[toppipe.scala 336:64]
          else : @[toppipe.scala 337:20]
            ex_mem_module.io.stdata_in <= id_ex_module.io.rd2_out @[toppipe.scala 338:40]
            skip @[toppipe.scala 337:20]
      skip @[toppipe.scala 331:42]
    else : @[toppipe.scala 341:19]
      node _T_79 = eq(forward_module.io.forward_B, UInt<1>("h00")) @[toppipe.scala 342:46]
      when _T_79 : @[toppipe.scala 342:59]
        node _T_80 = asUInt(id_ex_module.io.rd2_out) @[toppipe.scala 343:55]
        alu_module.io.in_B <= _T_80 @[toppipe.scala 343:28]
        ex_mem_module.io.stdata_in <= id_ex_module.io.rd2_out @[toppipe.scala 344:35]
        skip @[toppipe.scala 342:59]
      else : @[toppipe.scala 345:58]
        node _T_81 = eq(forward_module.io.forward_B, UInt<1>("h01")) @[toppipe.scala 345:45]
        when _T_81 : @[toppipe.scala 345:58]
          alu_module.io.in_B <= ex_mem_module.io.alu_out @[toppipe.scala 346:28]
          node _T_82 = asSInt(ex_mem_module.io.alu_out) @[toppipe.scala 347:64]
          ex_mem_module.io.stdata_in <= _T_82 @[toppipe.scala 347:36]
          skip @[toppipe.scala 345:58]
        else : @[toppipe.scala 348:58]
          node _T_83 = eq(forward_module.io.forward_B, UInt<2>("h02")) @[toppipe.scala 348:45]
          when _T_83 : @[toppipe.scala 348:58]
            node _T_84 = asUInt(register_module.io.writedata) @[toppipe.scala 349:60]
            alu_module.io.in_B <= _T_84 @[toppipe.scala 349:28]
            ex_mem_module.io.stdata_in <= register_module.io.writedata @[toppipe.scala 350:36]
            skip @[toppipe.scala 348:58]
          else : @[toppipe.scala 351:18]
            node _T_85 = asUInt(id_ex_module.io.rd2_out) @[toppipe.scala 352:54]
            alu_module.io.in_B <= _T_85 @[toppipe.scala 352:27]
            ex_mem_module.io.stdata_in <= id_ex_module.io.rd2_out @[toppipe.scala 353:36]
            skip @[toppipe.scala 351:18]
      skip @[toppipe.scala 341:19]
    alu_module.io.alu_Op <= aluctrl_module.io.alucontrolout @[toppipe.scala 356:26]
    ex_mem_module.io.memwrite_in <= id_ex_module.io.memwrite_out @[toppipe.scala 360:34]
    ex_mem_module.io.memread_in <= id_ex_module.io.memread_out @[toppipe.scala 361:33]
    smem_module.io.addr <= ex_mem_module.io.alu_out @[toppipe.scala 365:25]
    node _T_86 = asUInt(ex_mem_module.io.stdata_out) @[toppipe.scala 366:56]
    smem_module.io.data <= _T_86 @[toppipe.scala 366:25]
    smem_module.io.w_enable <= ex_mem_module.io.memwrite_out @[toppipe.scala 367:29]
    smem_module.io.r_enable <= ex_mem_module.io.memread_out @[toppipe.scala 368:29]
    mem_wb_moodule.io.regwrite_in <= ex_mem_module.io.regwrite_out @[toppipe.scala 377:35]
    mem_wb_moodule.io.memtoreg_in <= ex_mem_module.io.memtoreg_out @[toppipe.scala 378:35]
    mem_wb_moodule.io.memread_in <= ex_mem_module.io.memread_out @[toppipe.scala 379:34]
    mem_wb_moodule.io.memwrite_in <= ex_mem_module.io.memwrite_out @[toppipe.scala 380:35]
    mem_wb_moodule.io.dataout_in <= smem_module.io.output @[toppipe.scala 381:34]
    mem_wb_moodule.io.alu_in <= ex_mem_module.io.alu_out @[toppipe.scala 382:30]
    mem_wb_moodule.io.rd_in <= ex_mem_module.io.rd_out @[toppipe.scala 383:29]
    node _T_87 = eq(mem_wb_moodule.io.memtoreg_out, UInt<1>("h00")) @[toppipe.scala 387:37]
    node _T_88 = asSInt(mem_wb_moodule.io.alu_out) @[toppipe.scala 387:76]
    node _T_89 = eq(mem_wb_moodule.io.memtoreg_out, UInt<1>("h01")) @[toppipe.scala 388:37]
    node _T_90 = asSInt(mem_wb_moodule.io.dataout_out) @[toppipe.scala 388:80]
    node _T_91 = mux(_T_89, _T_90, asSInt(UInt<1>("h00"))) @[Mux.scala 98:16]
    node _T_92 = mux(_T_87, _T_88, _T_91) @[Mux.scala 98:16]
    register_module.io.writedata <= _T_92 @[toppipe.scala 386:34]
    register_module.io.regwrite <= mem_wb_moodule.io.regwrite_out @[toppipe.scala 392:33]
    register_module.io.writereg <= mem_wb_moodule.io.rd_out @[toppipe.scala 393:33]
    
